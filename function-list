// Function inventory for entire gsl library.
// XXX - This should be split up into one file per section!

// Basic mathematical functions.
# SECTION{"Mathematical Functions"}
# PACKAGE{"github.com/dtromb/gogsl",["gsl/gsl_math.h"],["GSL_","gsl_"]}
int gsl_isnan (const double x)
int gsl_isinf (const double x)
int gsl_finite (const double x)
double gsl_log1p (const double x)
double gsl_expm1 (const double x)
double gsl_hypot (const double x, const double y)
double gsl_hypot3 (const double x, const double y, const double z)
double gsl_acosh (const double x)
double gsl_asinh (const double x)
double gsl_atanh (const double x)
double gsl_ldexp (double x, int e)
# NEXTMAP{"2","OUTPTR"}
double gsl_frexp (double x, int * e)
double gsl_pow_int (double x, int n)
double gsl_pow_uint (double x, unsigned int n)
double gsl_pow_2 (const double x)
double gsl_pow_3 (const double x)
double gsl_pow_4 (const double x)
double gsl_pow_5 (const double x)
double gsl_pow_6 (const double x)
double gsl_pow_7 (const double x)
double gsl_pow_8 (const double x)
double gsl_pow_9 (const double x)
int gsl_fcmp (double x, double y, double epsilon)

// Complex number support.  This package is special-cased in the generator.
# SECTION{"Complex Numbers"}
# PACKAGE{"github.com/dtromb/gogsl/complex",["gsl/gsl_complex.h","gsl/gsl_complex_math.h"],["gsl_complex_"]}
# IMPORT{"unsafe"}
gsl_complex gsl_complex_rect (double x, double y)
gsl_complex gsl_complex_polar (double r, double theta)
double gsl_complex_arg (gsl_complex z)
double gsl_complex_abs (gsl_complex z)
double gsl_complex_abs2 (gsl_complex z)
double gsl_complex_logabs (gsl_complex z)
gsl_complex gsl_complex_add (gsl_complex a, gsl_complex b)
gsl_complex gsl_complex_sub (gsl_complex a, gsl_complex b)
gsl_complex gsl_complex_mul (gsl_complex a, gsl_complex b)
gsl_complex gsl_complex_div (gsl_complex a, gsl_complex b)
gsl_complex gsl_complex_add_real (gsl_complex a, double x)
gsl_complex gsl_complex_sub_real (gsl_complex a, double x)
gsl_complex gsl_complex_mul_real (gsl_complex a, double x)
gsl_complex gsl_complex_div_real (gsl_complex a, double x)
gsl_complex gsl_complex_add_imag (gsl_complex a, double y)
gsl_complex gsl_complex_sub_imag (gsl_complex a, double y)
gsl_complex gsl_complex_mul_imag (gsl_complex a, double y)
gsl_complex gsl_complex_div_imag (gsl_complex a, double y)
gsl_complex gsl_complex_conjugate (gsl_complex z)
gsl_complex gsl_complex_inverse (gsl_complex z)
gsl_complex gsl_complex_negative (gsl_complex z)
gsl_complex gsl_complex_sqrt (gsl_complex z)
gsl_complex gsl_complex_sqrt_real (double x)
gsl_complex gsl_complex_pow (gsl_complex z, gsl_complex a)
gsl_complex gsl_complex_pow_real (gsl_complex z, double x)
gsl_complex gsl_complex_exp (gsl_complex z)
gsl_complex gsl_complex_log (gsl_complex z)
gsl_complex gsl_complex_log10 (gsl_complex z)
gsl_complex gsl_complex_log_b (gsl_complex z, gsl_complex b)
gsl_complex gsl_complex_sin (gsl_complex z)
gsl_complex gsl_complex_cos (gsl_complex z)
gsl_complex gsl_complex_tan (gsl_complex z)
gsl_complex gsl_complex_sec (gsl_complex z)
gsl_complex gsl_complex_csc (gsl_complex z)
gsl_complex gsl_complex_cot (gsl_complex z)
gsl_complex gsl_complex_arcsin (gsl_complex z)
gsl_complex gsl_complex_arcsin_real (double z)
gsl_complex gsl_complex_arccos (gsl_complex z)
gsl_complex gsl_complex_arccos_real (double z)
gsl_complex gsl_complex_arctan (gsl_complex z)
gsl_complex gsl_complex_arcsec (gsl_complex z)
gsl_complex gsl_complex_arcsec_real (double z)
gsl_complex gsl_complex_arccsc (gsl_complex z)
gsl_complex gsl_complex_arccsc_real (double z)
gsl_complex gsl_complex_arccot (gsl_complex z)
gsl_complex gsl_complex_sinh (gsl_complex z)
gsl_complex gsl_complex_cosh (gsl_complex z)
gsl_complex gsl_complex_tanh (gsl_complex z)
gsl_complex gsl_complex_sech (gsl_complex z)
gsl_complex gsl_complex_csch (gsl_complex z)
gsl_complex gsl_complex_coth (gsl_complex z)
gsl_complex gsl_complex_arcsinh (gsl_complex z)
gsl_complex gsl_complex_arccosh (gsl_complex z)
gsl_complex gsl_complex_arccosh_real (double z)
gsl_complex gsl_complex_arctanh (gsl_complex z)
gsl_complex gsl_complex_arctanh_real (double z)
gsl_complex gsl_complex_arcsech (gsl_complex z)
gsl_complex gsl_complex_arccsch (gsl_complex z)
gsl_complex gsl_complex_arccoth (gsl_complex z)

// Polynomial manipulation, evaluation, and root finding.
# SECTION{"Polynomials"}
# PACKAGE{"github.com/dtromb/gogsl/poly", ["gsl/gsl_poly.h"], ["gsl_poly","gsl"]}
# GSL_REFTYPE{"gsl_poly_complex_workspace",[]}
double gsl_poly_eval (const double c[], const int len, const double x)
gsl_complex gsl_poly_complex_eval (const double c[], const int len, const gsl_complex z)
gsl_complex gsl_complex_poly_complex_eval (const gsl_complex c[], const int len, const gsl_complex z)
int gsl_poly_eval_derivs (const double c[], const size_t lenc, const double x, double res[], const size_t lenres)
int gsl_poly_dd_init (double dd[], const double xa[], const double ya[], size_t size)
double gsl_poly_dd_eval (const double dd[], const double xa[], const size_t size, const double x)
int gsl_poly_dd_taylor (double c[], double xp, const double dd[], const double xa[], size_t size, double w[])
int gsl_poly_dd_hermite_init (double dd[], double za[], const double xa[], const double ya[], const double dya[], const size_t size)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_poly_complex_solve_quadratic (double a, double b, double c, gsl_complex * z0, gsl_complex * z1)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
# NEXTMAP{"6","OUTPTR"}
int gsl_poly_complex_solve_cubic (double a, double b, double c, gsl_complex * z0, gsl_complex * z1, gsl_complex * z2)
gsl_poly_complex_workspace * gsl_poly_complex_workspace_alloc (size_t n)
void gsl_poly_complex_workspace_free (gsl_poly_complex_workspace * w)
# NEXTMAP{"1","SLICEPTR"}
int gsl_poly_complex_solve (const double * a, size_t n, gsl_poly_complex_workspace * w, gsl_complex_packed_ptr z)

// The top-level special functions library package.  All of the hundreds of special functions 
// in GSL are contained in subpackages of sf.
# SECTION{"Special Functions"}
# PACKAGE{"github.com/dtromb/gogsl/sf", ["gsl/gsl_sf_result.h","gsl/gsl_sf_elementary.h"], ["GSL_","gsl_sf_"]}
# GSL_REFTYPE{"gsl_sf_result",["CData []byte"]}
# GSL_REFTYPE{"gsl_sf_result_e10",["CData []byte"]}
# GSL_ENUM{"gsl_mode_t"}
int gsl_sf_multiply_e (double x, double y, gsl_sf_result * result)
int gsl_sf_multiply_err_e (double x, double dx, double y, double dy, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/airy", ["gsl/gsl_sf_result.h","gsl/gsl_sf_airy.h"], ["gsl_sf_airy_"]}
double gsl_sf_airy_Ai (double x, gsl_mode_t mode)
int gsl_sf_airy_Ai_e (double x, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_airy_Bi (double x, gsl_mode_t mode)
int gsl_sf_airy_Bi_e (double x, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_airy_Ai_scaled (double x, gsl_mode_t mode)
int gsl_sf_airy_Ai_scaled_e (double x, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_airy_Bi_scaled (double x, gsl_mode_t mode)
int gsl_sf_airy_Bi_scaled_e (double x, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_airy_Ai_deriv (double x, gsl_mode_t mode)
int gsl_sf_airy_Ai_deriv_e (double x, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_airy_Bi_deriv (double x, gsl_mode_t mode)
int gsl_sf_airy_Bi_deriv_e (double x, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_airy_Ai_deriv_scaled (double x, gsl_mode_t mode)
int gsl_sf_airy_Ai_deriv_scaled_e (double x, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_airy_Bi_deriv_scaled (double x, gsl_mode_t mode)
int gsl_sf_airy_Bi_deriv_scaled_e (double x, gsl_mode_t mode, gsl_sf_result * result)
int gsl_sf_airy_zero_Ai_e (unsigned int s, gsl_sf_result * result)
double gsl_sf_airy_zero_Bi (unsigned int s)
int gsl_sf_airy_zero_Bi_e (unsigned int s, gsl_sf_result * result)
double gsl_sf_airy_zero_Ai_deriv (unsigned int s)
int gsl_sf_airy_zero_Ai_deriv_e (unsigned int s, gsl_sf_result * result)
double gsl_sf_airy_zero_Bi_deriv (unsigned int s)
int gsl_sf_airy_zero_Bi_deriv_e (unsigned int s, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/bessel/cylindrical", ["gsl/gsl_sf_result.h","gsl/gsl_sf_bessel.h"], ["gsl_sf_bessel"]}
double gsl_sf_bessel_J0 (double x)
int gsl_sf_bessel_J0_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_J1 (double x)
int gsl_sf_bessel_J1_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_Jn (int n, double x)
int gsl_sf_bessel_Jn_e (int n, double x, gsl_sf_result * result)
int gsl_sf_bessel_Jn_array (int nmin, int nmax, double x, double result_array[])
double gsl_sf_bessel_Y0 (double x)
int gsl_sf_bessel_Y0_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_Y1 (double x)
int gsl_sf_bessel_Y1_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_Yn (int n, double x)
int gsl_sf_bessel_Yn_e (int n, double x, gsl_sf_result * result)
int gsl_sf_bessel_Yn_array (int nmin, int nmax, double x, double result_array[])
double gsl_sf_bessel_I0 (double x)
int gsl_sf_bessel_I0_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_I1 (double x)
int gsl_sf_bessel_I1_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_In (int n, double x)
int gsl_sf_bessel_In_e (int n, double x, gsl_sf_result * result)
int gsl_sf_bessel_In_array (int nmin, int nmax, double x, double result_array[])
double gsl_sf_bessel_I0_scaled (double x)
int gsl_sf_bessel_I0_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_I1_scaled (double x)
int gsl_sf_bessel_I1_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_In_scaled (int n, double x)
int gsl_sf_bessel_In_scaled_e (int n, double x, gsl_sf_result * result)
int gsl_sf_bessel_In_scaled_array (int nmin, int nmax, double x, double result_array[])
double gsl_sf_bessel_K0 (double x)
int gsl_sf_bessel_K0_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_K1 (double x)
int gsl_sf_bessel_K1_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_Kn (int n, double x)
int gsl_sf_bessel_Kn_e (int n, double x, gsl_sf_result * result)
int gsl_sf_bessel_Kn_array (int nmin, int nmax, double x, double result_array[])
double gsl_sf_bessel_K0_scaled (double x)
int gsl_sf_bessel_K0_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_K1_scaled (double x)
int gsl_sf_bessel_K1_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_Kn_scaled (int n, double x)
int gsl_sf_bessel_Kn_scaled_e (int n, double x, gsl_sf_result * result)
int gsl_sf_bessel_Kn_scaled_array (int nmin, int nmax, double x, double result_array[])
# PACKAGE{"github.com/dtromb/gogsl/sf/bessel/spherical", ["gsl/gsl_sf_result.h","gsl/gsl_sf_bessel.h"], ["gsl_sf_bessel"]}
double gsl_sf_bessel_j0 (double x)
int gsl_sf_bessel_j0_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_j1 (double x)
int gsl_sf_bessel_j1_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_j2 (double x)
int gsl_sf_bessel_j2_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_jl (int l, double x)
int gsl_sf_bessel_jl_e (int l, double x, gsl_sf_result * result)
int gsl_sf_bessel_jl_array (int lmax, double x, double result_array[])
#NEXTMAP{"3","SLICEPTR"}
int gsl_sf_bessel_jl_steed_array (int lmax, double x, double * result_array)
double gsl_sf_bessel_y0 (double x)
int gsl_sf_bessel_y0_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_y1 (double x)
int gsl_sf_bessel_y1_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_y2 (double x)
int gsl_sf_bessel_y2_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_yl (int l, double x)
int gsl_sf_bessel_yl_e (int l, double x, gsl_sf_result * result)
int gsl_sf_bessel_yl_array (int lmax, double x, double result_array[])
double gsl_sf_bessel_i0_scaled (double x)
int gsl_sf_bessel_i0_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_i1_scaled (double x)
int gsl_sf_bessel_i1_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_i2_scaled (double x)
int gsl_sf_bessel_i2_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_il_scaled (int l, double x)
int gsl_sf_bessel_il_scaled_e (int l, double x, gsl_sf_result * result)
int gsl_sf_bessel_il_scaled_array (int lmax, double x, double result_array[])
double gsl_sf_bessel_k0_scaled (double x)
int gsl_sf_bessel_k0_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_k1_scaled (double x)
int gsl_sf_bessel_k1_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_k2_scaled (double x)
int gsl_sf_bessel_k2_scaled_e (double x, gsl_sf_result * result)
double gsl_sf_bessel_kl_scaled (int l, double x)
int gsl_sf_bessel_kl_scaled_e (int l, double x, gsl_sf_result * result)
int gsl_sf_bessel_kl_scaled_array (int lmax, double x, double result_array[])
# PACKAGE{"github.com/dtromb/gogsl/sf/bessel/fractional", ["gsl/gsl_sf_result.h","gsl/gsl_sf_bessel.h"], ["gsl_sf_bessel"]}
double gsl_sf_bessel_Jnu (double nu, double x)
int gsl_sf_bessel_Jnu_e (double nu, double x, gsl_sf_result * result)
int gsl_sf_bessel_sequence_Jnu_e (double nu, gsl_mode_t mode, size_t size, double v[])
double gsl_sf_bessel_Ynu (double nu, double x)
int gsl_sf_bessel_Ynu_e (double nu, double x, gsl_sf_result * result)
double gsl_sf_bessel_Inu (double nu, double x)
int gsl_sf_bessel_Inu_e (double nu, double x, gsl_sf_result * result)
double gsl_sf_bessel_Inu_scaled (double nu, double x)
int gsl_sf_bessel_Inu_scaled_e (double nu, double x, gsl_sf_result * result)
double gsl_sf_bessel_Knu (double nu, double x)
int gsl_sf_bessel_Knu_e (double nu, double x, gsl_sf_result * result)
double gsl_sf_bessel_lnKnu (double nu, double x)
int gsl_sf_bessel_lnKnu_e (double nu, double x, gsl_sf_result * result)
double gsl_sf_bessel_Knu_scaled (double nu, double x)
int gsl_sf_bessel_Knu_scaled_e (double nu, double x, gsl_sf_result * result)
double gsl_sf_bessel_zero_J0 (unsigned int s)
int gsl_sf_bessel_zero_J0_e (unsigned int s, gsl_sf_result * result)
double gsl_sf_bessel_zero_J1 (unsigned int s)
int gsl_sf_bessel_zero_J1_e (unsigned int s, gsl_sf_result * result)
double gsl_sf_bessel_zero_Jnu (double nu, unsigned int s)
int gsl_sf_bessel_zero_Jnu_e (double nu, unsigned int s, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/clausen", ["gsl/gsl_sf_result.h","gsl/gsl_sf_clausen.h"], ["gsl_sf_"]}
double gsl_sf_clausen (double x)
int gsl_sf_clausen_e (double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/coulomb", ["gsl/gsl_sf_result.h","gsl/gsl_sf_coulomb.h"], ["gsl_sf_coulomb","gsl_sf"]}
double gsl_sf_hydrogenicR_1 (double Z, double r)
int gsl_sf_hydrogenicR_1_e (double Z, double r, gsl_sf_result * result)
double gsl_sf_hydrogenicR (int n, int l, double Z, double r)
int gsl_sf_hydrogenicR_e (int n, int l, double Z, double r, gsl_sf_result * result)
# NEXTMAP{"9","SLICEPTR"}
# NEXTMAP{"10","SLICEPTR"}
int gsl_sf_coulomb_wave_FG_e (double eta, double x, double L_F, int k, gsl_sf_result * F, gsl_sf_result * Fp, gsl_sf_result * G, gsl_sf_result * Gp, double * exp_F, double * exp_G)
# NEXTMAP{"6","SLICEPTR"}
int gsl_sf_coulomb_wave_F_array (double L_min, int kmax, double eta, double x, double fc_array[], double * F_exponent)
# NEXTMAP{"7","SLICEPTR"}
# NEXTMAP{"8","SLICEPTR"}
int gsl_sf_coulomb_wave_FG_array (double L_min, int kmax, double eta, double x, double fc_array[], double gc_array[], double * F_exponent, double * G_exponent)
# NEXTMAP{"9","SLICEPTR"}
# NEXTMAP{"10","SLICEPTR"}
int gsl_sf_coulomb_wave_FGp_array (double L_min, int kmax, double eta, double x, double fc_array[], double fcp_array[], double gc_array[], double gcp_array[], double * F_exponent, double * G_exponent)
int gsl_sf_coulomb_wave_sphF_array (double L_min, int kmax, double eta, double x, double fc_array[], double F_exponent[])
int gsl_sf_coulomb_CL_e (double L, double eta, gsl_sf_result * result)
int gsl_sf_coulomb_CL_array (double Lmin, int kmax, double eta, double cl[])
# PACKAGE{"github.com/dtromb/gogsl/sf/coupling", ["gsl/gsl_sf_result.h","gsl/gsl_sf_coupling.h"], ["gsl_sf_coupling_"]}
double gsl_sf_coupling_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc)
int gsl_sf_coupling_3j_e (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc, gsl_sf_result * result)
double gsl_sf_coupling_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf)
int gsl_sf_coupling_6j_e (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, gsl_sf_result * result) 
double gsl_sf_coupling_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji)
int gsl_sf_coupling_9j_e (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji, gsl_sf_result * result) 
# PACKAGE{"github.com/dtromb/gogsl/sf/dawson", ["gsl/gsl_sf_result.h","gsl/gsl_sf_dawson.h"], ["gsl_sf_"]}
double gsl_sf_dawson (double x)
int gsl_sf_dawson_e (double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/debye", ["gsl/gsl_sf_result.h","gsl/gsl_sf_debye.h"], ["gsl_sf"]}
double gsl_sf_debye_1 (double x)
int gsl_sf_debye_1_e (double x, gsl_sf_result * result)
double gsl_sf_debye_2 (double x)
int gsl_sf_debye_2_e (double x, gsl_sf_result * result)
double gsl_sf_debye_3 (double x)
int gsl_sf_debye_3_e (double x, gsl_sf_result * result)
double gsl_sf_debye_4 (double x)
int gsl_sf_debye_4_e (double x, gsl_sf_result * result)
double gsl_sf_debye_5 (double x)
int gsl_sf_debye_5_e (double x, gsl_sf_result * result)
double gsl_sf_debye_6 (double x)
int gsl_sf_debye_6_e (double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/dilog", ["gsl/gsl_sf_result.h","gsl/gsl_sf_dilog.h"], ["gsl_sf"]}
# IMPORT{"github.com/dtromb/gogsl/sf"}
double gsl_sf_dilog (double x)
int gsl_sf_dilog_e (double x, gsl_sf_result * result)
int gsl_sf_complex_dilog_e (double r, double theta, gsl_sf_result * result_re, gsl_sf_result * result_im)
# PACKAGE{"github.com/dtromb/gogsl/sf/ellint", ["gsl/gsl_sf_result.h","gsl/gsl_sf_ellint.h"], ["gsl_sf_ellint"]}
# IMPORT{"github.com/dtromb/gogsl/sf"}
double gsl_sf_ellint_Kcomp (double k, gsl_mode_t mode)
int gsl_sf_ellint_Kcomp_e (double k, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_Ecomp (double k, gsl_mode_t mode)
int gsl_sf_ellint_Ecomp_e (double k, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_Pcomp (double k, double n, gsl_mode_t mode)
int gsl_sf_ellint_Pcomp_e (double k, double n, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_F (double phi, double k, gsl_mode_t mode)
int gsl_sf_ellint_F_e (double phi, double k, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_E (double phi, double k, gsl_mode_t mode)
int gsl_sf_ellint_E_e (double phi, double k, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_P (double phi, double k, double n, gsl_mode_t mode)
int gsl_sf_ellint_P_e (double phi, double k, double n, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_D (double phi, double k, double n, gsl_mode_t mode)
int gsl_sf_ellint_D_e (double phi, double k, double n, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_RC (double x, double y, gsl_mode_t mode)
int gsl_sf_ellint_RC_e (double x, double y, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_RD (double x, double y, double z, gsl_mode_t mode)
int gsl_sf_ellint_RD_e (double x, double y, double z, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_RF (double x, double y, double z, gsl_mode_t mode)
int gsl_sf_ellint_RF_e (double x, double y, double z, gsl_mode_t mode, gsl_sf_result * result)
double gsl_sf_ellint_RJ (double x, double y, double z, double p, gsl_mode_t mode)
int gsl_sf_ellint_RJ_e (double x, double y, double z, double p, gsl_mode_t mode, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/elljac", ["gsl/gsl_sf_result.h","gsl/gsl_sf_elljac.h"], ["gsl_sf_elljac"]}
# NEXTMAP{"3","SLICEPTR"}
# NEXTMAP{"4","SLICEPTR"}
# NEXTMAP{"5","SLICEPTR"}
int gsl_sf_elljac_e (double u, double m, double * sn, double * cn, double * dn)
# PACKAGE{"github.com/dtromb/gogsl/sf/erf", ["gsl/gsl_sf_result.h","gsl/gsl_sf_erf.h"], ["gsl_sf"]}
double gsl_sf_erf (double x)
int gsl_sf_erf_e (double x, gsl_sf_result * result)
double gsl_sf_erfc (double x)
int gsl_sf_erfc_e (double x, gsl_sf_result * result)
double gsl_sf_log_erfc (double x)
int gsl_sf_log_erfc_e (double x, gsl_sf_result * result)
double gsl_sf_erf_Z (double x)
int gsl_sf_erf_Z_e (double x, gsl_sf_result * result)
double gsl_sf_erf_Q (double x)
int gsl_sf_erf_Q_e (double x, gsl_sf_result * result)
double gsl_sf_hazard (double x)
int gsl_sf_hazard_e (double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/exp", ["gsl/gsl_sf_result.h","gsl/gsl_sf_exp.h"], ["gsl_sf"]}
double gsl_sf_exp (double x)
int gsl_sf_exp_e (double x, gsl_sf_result * result)
int gsl_sf_exp_e10_e (double x, gsl_sf_result_e10 * result)
double gsl_sf_exp_mult (double x, double y)
int gsl_sf_exp_mult_e (double x, double y, gsl_sf_result * result)
int gsl_sf_exp_mult_e10_e (const double x, const double y, gsl_sf_result_e10 * result)
double gsl_sf_expm1 (double x)
int gsl_sf_expm1_e (double x, gsl_sf_result * result)
double gsl_sf_exprel (double x)
int gsl_sf_exprel_e (double x, gsl_sf_result * result)
double gsl_sf_exprel_2 (double x)
int gsl_sf_exprel_2_e (double x, gsl_sf_result * result)
double gsl_sf_exprel_n (int n, double x)
int gsl_sf_exprel_n_e (int n, double x, gsl_sf_result * result)
int gsl_sf_exp_err_e (double x, double dx, gsl_sf_result * result)
int gsl_sf_exp_err_e10_e (double x, double dx, gsl_sf_result_e10 * result)
int gsl_sf_exp_mult_err_e (double x, double dx, double y, double dy, gsl_sf_result * result)
int gsl_sf_exp_mult_err_e10_e (double x, double dx, double y, double dy, gsl_sf_result_e10 * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/expint", ["gsl/gsl_sf_result.h","gsl/gsl_sf_expint.h"], ["gsl_sf_expint","gsl_sf"]}
double gsl_sf_expint_E1 (double x)
int gsl_sf_expint_E1_e (double x, gsl_sf_result * result)
double gsl_sf_expint_E2 (double x)
int gsl_sf_expint_E2_e (double x, gsl_sf_result * result)
double gsl_sf_expint_En (int n, double x)
int gsl_sf_expint_En_e (int n, double x, gsl_sf_result * result)
double gsl_sf_expint_Ei (double x)
int gsl_sf_expint_Ei_e (double x, gsl_sf_result * result)
double gsl_sf_Shi (double x)
int gsl_sf_Shi_e (double x, gsl_sf_result * result)
double gsl_sf_Chi (double x)
int gsl_sf_Chi_e (double x, gsl_sf_result * result)
# NAME{"Ei3"}
double gsl_sf_expint_3 (double x)
# NAME{"Ei3e"}
int gsl_sf_expint_3_e (double x, gsl_sf_result * result)
double gsl_sf_Si (const double x)
int gsl_sf_Si_e (double x, gsl_sf_result * result)
double gsl_sf_Ci (const double x)
int gsl_sf_Ci_e (double x, gsl_sf_result * result)
double gsl_sf_atanint (double x)
int gsl_sf_atanint_e (double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/fermidirac", ["gsl/gsl_sf_result.h","gsl/gsl_sf_fermi_dirac.h"], ["gsl_sf_fermi_dirac"]}
double gsl_sf_fermi_dirac_m1 (double x)
int gsl_sf_fermi_dirac_m1_e (double x, gsl_sf_result * result)
# NAME{"Zero"}
double gsl_sf_fermi_dirac_0 (double x)
# NAME{"ZeroE"}
int gsl_sf_fermi_dirac_0_e (double x, gsl_sf_result * result)
# NAME{"One"}
double gsl_sf_fermi_dirac_1 (double x)
# NAME{"OneE"}
int gsl_sf_fermi_dirac_1_e (double x, gsl_sf_result * result)
# NAME{"Two"}
double gsl_sf_fermi_dirac_2 (double x)
# NAME{"TwoE"}
int gsl_sf_fermi_dirac_2_e (double x, gsl_sf_result * result)
double gsl_sf_fermi_dirac_int (int j, double x)
int gsl_sf_fermi_dirac_int_e (int j, double x, gsl_sf_result * result)
double gsl_sf_fermi_dirac_mhalf (double x)
int gsl_sf_fermi_dirac_mhalf_e (double x, gsl_sf_result * result)
double gsl_sf_fermi_dirac_half (double x)
int gsl_sf_fermi_dirac_half_e (double x, gsl_sf_result * result)
# NAME{"Threehalf"}
double gsl_sf_fermi_dirac_3half (double x)
# NAME{"ThreehalfE"}
int gsl_sf_fermi_dirac_3half_e (double x, gsl_sf_result * result)
double gsl_sf_fermi_dirac_inc_0 (double x, double b)
int gsl_sf_fermi_dirac_inc_0_e (double x, double b, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/gamma", ["gsl/gsl_sf_result.h","gsl/gsl_sf_gamma.h"], ["gsl_sf"]}
double gsl_sf_gamma (double x)
int gsl_sf_gamma_e (double x, gsl_sf_result * result)
double gsl_sf_lngamma (double x)
int gsl_sf_lngamma_e (double x, gsl_sf_result * result)
# NEXTMAP{"3","OUTPTR"}
int gsl_sf_lngamma_sgn_e (double x, gsl_sf_result * result_lg, double * sgn)
double gsl_sf_gammastar (double x)
int gsl_sf_gammastar_e (double x, gsl_sf_result * result)
double gsl_sf_gammainv (double x)
int gsl_sf_gammainv_e (double x, gsl_sf_result * result)
int gsl_sf_lngamma_complex_e (double zr, double zi, gsl_sf_result * lnr, gsl_sf_result * arg)
double gsl_sf_fact (unsigned int n)
int gsl_sf_fact_e (unsigned int n, gsl_sf_result * result)
double gsl_sf_doublefact (unsigned int n)
int gsl_sf_doublefact_e (unsigned int n, gsl_sf_result * result)
double gsl_sf_lnfact (unsigned int n)
int gsl_sf_lnfact_e (unsigned int n, gsl_sf_result * result)
double gsl_sf_lndoublefact (unsigned int n)
int gsl_sf_lndoublefact_e (unsigned int n, gsl_sf_result * result)
double gsl_sf_choose (unsigned int n, unsigned int m)
int gsl_sf_choose_e (unsigned int n, unsigned int m, gsl_sf_result * result)
double gsl_sf_lnchoose (unsigned int n, unsigned int m)
int gsl_sf_lnchoose_e (unsigned int n, unsigned int m, gsl_sf_result * result)
double gsl_sf_taylorcoeff (int n, double x)
int gsl_sf_taylorcoeff_e (int n, double x, gsl_sf_result * result)
double gsl_sf_poch (double a, double x)
int gsl_sf_poch_e (double a, double x, gsl_sf_result * result)
double gsl_sf_lnpoch (double a, double x)
int gsl_sf_lnpoch_e (double a, double x, gsl_sf_result * result)
# NEXTMAP{"4","OUTPTR"}
int gsl_sf_lnpoch_sgn_e (double a, double x, gsl_sf_result * result, double * sgn)
double gsl_sf_pochrel (double a, double x)
int gsl_sf_pochrel_e (double a, double x, gsl_sf_result * result)
double gsl_sf_gamma_inc (double a, double x)
int gsl_sf_gamma_inc_e (double a, double x, gsl_sf_result * result)
double gsl_sf_gamma_inc_Q (double a, double x)
int gsl_sf_gamma_inc_Q_e (double a, double x, gsl_sf_result * result)
double gsl_sf_gamma_inc_P (double a, double x)
int gsl_sf_gamma_inc_P_e (double a, double x, gsl_sf_result * result)
double gsl_sf_beta (double a, double b)
int gsl_sf_beta_e (double a, double b, gsl_sf_result * result)
double gsl_sf_lnbeta (double a, double b)
int gsl_sf_lnbeta_e (double a, double b, gsl_sf_result * result)
double gsl_sf_beta_inc (double a, double b, double x)
int gsl_sf_beta_inc_e (double a, double b, double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/gegenbauer", ["gsl/gsl_sf_result.h","gsl/gsl_sf_gegenbauer.h"], ["gsl_sf"]}
double gsl_sf_gegenpoly_1 (double lambda, double x)
double gsl_sf_gegenpoly_2 (double lambda, double x)
double gsl_sf_gegenpoly_3 (double lambda, double x)
int gsl_sf_gegenpoly_1_e (double lambda, double x, gsl_sf_result * result)
int gsl_sf_gegenpoly_2_e (double lambda, double x, gsl_sf_result * result)
int gsl_sf_gegenpoly_3_e (double lambda, double x, gsl_sf_result * result)
double gsl_sf_gegenpoly_n (int n, double lambda, double x)
int gsl_sf_gegenpoly_n_e (int n, double lambda, double x, gsl_sf_result * result)
int gsl_sf_gegenpoly_array (int nmax, double lambda, double x, double result_array[])
# PACKAGE{"github.com/dtromb/gogsl/sf/hyperg", ["gsl/gsl_sf_result.h","gsl/gsl_sf_hyperg.h"], ["gsl_sf"]}
double gsl_sf_hyperg_0F1 (double c, double x)
int gsl_sf_hyperg_0F1_e (double c, double x, gsl_sf_result * result)
double gsl_sf_hyperg_1F1_int (int m, int n, double x)
int gsl_sf_hyperg_1F1_int_e (int m, int n, double x, gsl_sf_result * result)
double gsl_sf_hyperg_1F1 (double a, double b, double x)
int gsl_sf_hyperg_1F1_e (double a, double b, double x, gsl_sf_result * result)
double gsl_sf_hyperg_U_int (int m, int n, double x)
int gsl_sf_hyperg_U_int_e (int m, int n, double x, gsl_sf_result * result)
int gsl_sf_hyperg_U_int_e10_e (int m, int n, double x, gsl_sf_result_e10 * result)
double gsl_sf_hyperg_U (double a, double b, double x)
int gsl_sf_hyperg_U_e (double a, double b, double x, gsl_sf_result * result)
int gsl_sf_hyperg_U_e10_e (double a, double b, double x, gsl_sf_result_e10 * result)
double gsl_sf_hyperg_2F1 (double a, double b, double c, double x)
int gsl_sf_hyperg_2F1_e (double a, double b, double c, double x, gsl_sf_result * result)
double gsl_sf_hyperg_2F1_conj (double aR, double aI, double c, double x)
int gsl_sf_hyperg_2F1_conj_e (double aR, double aI, double c, double x, gsl_sf_result * result)
double gsl_sf_hyperg_2F1_renorm (double a, double b, double c, double x)
int gsl_sf_hyperg_2F1_renorm_e (double a, double b, double c, double x, gsl_sf_result * result)
double gsl_sf_hyperg_2F1_conj_renorm (double aR, double aI, double c, double x)
int gsl_sf_hyperg_2F1_conj_renorm_e (double aR, double aI, double c, double x, gsl_sf_result * result)
double gsl_sf_hyperg_2F0 (double a, double b, double x)
int gsl_sf_hyperg_2F0_e (double a, double b, double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/laguerre", ["gsl/gsl_sf_result.h","gsl/gsl_sf_laguerre.h"], ["gsl_sf"]}
double gsl_sf_laguerre_1 (double a, double x)
double gsl_sf_laguerre_2 (double a, double x)
double gsl_sf_laguerre_3 (double a, double x)
int gsl_sf_laguerre_1_e (double a, double x, gsl_sf_result * result)
int gsl_sf_laguerre_2_e (double a, double x, gsl_sf_result * result)
int gsl_sf_laguerre_3_e (double a, double x, gsl_sf_result * result)
double gsl_sf_laguerre_n (const int n, const double a, const double x)
int gsl_sf_laguerre_n_e (int n, double a, double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/lambert", ["gsl/gsl_sf_result.h","gsl/gsl_sf_lambert.h"], ["gsl_sf_lambert"]}
double gsl_sf_lambert_W0 (double x)
int gsl_sf_lambert_W0_e (double x, gsl_sf_result * result)
double gsl_sf_lambert_Wm1 (double x)
int gsl_sf_lambert_Wm1_e (double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/legendre", ["gsl/gsl_sf_result.h","gsl/gsl_sf_legendre.h"], ["gsl_sf_legendre","gsl_sf"]}
double gsl_sf_legendre_P1 (double x)
double gsl_sf_legendre_P2 (double x)
double gsl_sf_legendre_P3 (double x)
int gsl_sf_legendre_P1_e (double x, gsl_sf_result * result)
int gsl_sf_legendre_P2_e (double x, gsl_sf_result * result)
int gsl_sf_legendre_P3_e (double x, gsl_sf_result * result)
double gsl_sf_legendre_Pl (int l, double x)
int gsl_sf_legendre_Pl_e (int l, double x, gsl_sf_result * result)
int gsl_sf_legendre_Pl_array (int lmax, double x, double result_array[])
int gsl_sf_legendre_Pl_deriv_array (int lmax, double x, double result_array[], double result_deriv_array[])
double gsl_sf_legendre_Q0 (double x)
int gsl_sf_legendre_Q0_e (double x, gsl_sf_result * result)
double gsl_sf_legendre_Q1 (double x)
int gsl_sf_legendre_Q1_e (double x, gsl_sf_result * result)
double gsl_sf_legendre_Ql (int l, double x)
int gsl_sf_legendre_Ql_e (int l, double x, gsl_sf_result * result)
double gsl_sf_legendre_Plm (int l, int m, double x)
int gsl_sf_legendre_Plm_e (int l, int m, double x, gsl_sf_result * result)
int gsl_sf_legendre_Plm_array (int lmax, int m, double x, double result_array[])
int gsl_sf_legendre_Plm_deriv_array (int lmax, int m, double x, double result_array[], double result_deriv_array[])
double gsl_sf_legendre_sphPlm (int l, int m, double x)
int gsl_sf_legendre_sphPlm_e (int l, int m, double x, gsl_sf_result * result)
int gsl_sf_legendre_sphPlm_array (int lmax, int m, double x, double result_array[])
int gsl_sf_legendre_sphPlm_deriv_array (int lmax, int m, double x, double result_array[], double result_deriv_array[])
int gsl_sf_legendre_array_size (const int lmax, const int m)
double gsl_sf_conicalP_half (double lambda, double x)
int gsl_sf_conicalP_half_e (double lambda, double x, gsl_sf_result * result)
double gsl_sf_conicalP_mhalf (double lambda, double x)
int gsl_sf_conicalP_mhalf_e (double lambda, double x, gsl_sf_result * result)
double gsl_sf_conicalP_0 (double lambda, double x)
int gsl_sf_conicalP_0_e (double lambda, double x, gsl_sf_result * result)
double gsl_sf_conicalP_1 (double lambda, double x)
int gsl_sf_conicalP_1_e (double lambda, double x, gsl_sf_result * result)
double gsl_sf_conicalP_sph_reg (int l, double lambda, double x)
int gsl_sf_conicalP_sph_reg_e (int l, double lambda, double x, gsl_sf_result * result)
double gsl_sf_conicalP_cyl_reg (int m, double lambda, double x)
int gsl_sf_conicalP_cyl_reg_e (int m, double lambda, double x, gsl_sf_result * result)
double gsl_sf_legendre_H3d_0 (double lambda, double eta)
int gsl_sf_legendre_H3d_0_e (double lambda, double eta, gsl_sf_result * result)
double gsl_sf_legendre_H3d_1 (double lambda, double eta)
int gsl_sf_legendre_H3d_1_e (double lambda, double eta, gsl_sf_result * result)
double gsl_sf_legendre_H3d (int l, double lambda, double eta)
int gsl_sf_legendre_H3d_e (int l, double lambda, double eta, gsl_sf_result * result)
int gsl_sf_legendre_H3d_array (int lmax, double lambda, double eta, double result_array[])
# PACKAGE{"github.com/dtromb/gogsl/sf/log", ["gsl/gsl_sf_result.h","gsl/gsl_sf_log.h"], ["gsl_sf"]}
double gsl_sf_log (double x)
int gsl_sf_log_e (double x, gsl_sf_result * result)
double gsl_sf_log_abs (double x)
int gsl_sf_log_abs_e (double x, gsl_sf_result * result)
int gsl_sf_complex_log_e (double zr, double zi, gsl_sf_result * lnr, gsl_sf_result * theta)
double gsl_sf_log_1plusx (double x)
int gsl_sf_log_1plusx_e (double x, gsl_sf_result * result)
double gsl_sf_log_1plusx_mx (double x)
int gsl_sf_log_1plusx_mx_e (double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/mathieu", ["gsl/gsl_sf_result.h","gsl/gsl_sf_mathieu.h"], ["gsl_sf_mathieu"]}
# GSL_REFTYPE{"gsl_sf_mathieu_workspace",[]}
# NAME{"MathieuWorkspaceAlloc"}
gsl_sf_mathieu_workspace * gsl_sf_mathieu_alloc (size_t n, double qmax)
void gsl_sf_mathieu_free (gsl_sf_mathieu_workspace * work)
int gsl_sf_mathieu_a (int n, double q, gsl_sf_result * result)
int gsl_sf_mathieu_b (int n, double q, gsl_sf_result * result)
int gsl_sf_mathieu_a_array (int order_min, int order_max, double q, gsl_sf_mathieu_workspace * work, double result_array[])
int gsl_sf_mathieu_b_array (int order_min, int order_max, double q, gsl_sf_mathieu_workspace * work, double result_array[])
int gsl_sf_mathieu_ce (int n, double q, double x, gsl_sf_result * result)
int gsl_sf_mathieu_se (int n, double q, double x, gsl_sf_result * result)
int gsl_sf_mathieu_ce_array (int nmin, int nmax, double q, double x, gsl_sf_mathieu_workspace * work, double result_array[])
int gsl_sf_mathieu_se_array (int nmin, int nmax, double q, double x, gsl_sf_mathieu_workspace * work, double result_array[])
int gsl_sf_mathieu_Mc (int j, int n, double q, double x, gsl_sf_result * result)
int gsl_sf_mathieu_Ms (int j, int n, double q, double x, gsl_sf_result * result)
int gsl_sf_mathieu_Mc_array (int j, int nmin, int nmax, double q, double x, gsl_sf_mathieu_workspace * work, double result_array[])
int gsl_sf_mathieu_Ms_array (int j, int nmin, int nmax, double q, double x, gsl_sf_mathieu_workspace * work, double result_array[])
# PACKAGE{"github.com/dtromb/gogsl/sf/powint", ["gsl/gsl_sf_result.h","gsl/gsl_sf_pow_int.h"], ["gsl_sf"]}
double gsl_sf_pow_int (double x, int n)
int gsl_sf_pow_int_e (double x, int n, gsl_sf_result * result) 
# PACKAGE{"github.com/dtromb/gogsl/sf/psi", ["gsl/gsl_sf_result.h","gsl/gsl_sf_psi.h"], ["gsl_sf"]}
double gsl_sf_psi_int (int n)
int gsl_sf_psi_int_e (int n, gsl_sf_result * result)
double gsl_sf_psi (double x)
int gsl_sf_psi_e (double x, gsl_sf_result * result)
double gsl_sf_psi_1piy (double y)
int gsl_sf_psi_1piy_e (double y, gsl_sf_result * result)
double gsl_sf_psi_1_int (int n)
int gsl_sf_psi_1_int_e (int n, gsl_sf_result * result)
double gsl_sf_psi_1 (double x)
int gsl_sf_psi_1_e (double x, gsl_sf_result * result)
double gsl_sf_psi_n (int n, double x)
int gsl_sf_psi_n_e (int n, double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/syncrhotron", ["gsl/gsl_sf_result.h","gsl/gsl_sf_synchrotron.h"], ["gsl_sf"]}
double gsl_sf_synchrotron_1 (double x)
int gsl_sf_synchrotron_1_e (double x, gsl_sf_result * result)
double gsl_sf_synchrotron_2 (double x)
int gsl_sf_synchrotron_2_e (double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/transport", ["gsl/gsl_sf_result.h","gsl/gsl_sf_transport.h"], ["gsl_sf"]}
double gsl_sf_transport_2 (double x)
int gsl_sf_transport_2_e (double x, gsl_sf_result * result)
double gsl_sf_transport_3 (double x)
int gsl_sf_transport_3_e (double x, gsl_sf_result * result)
double gsl_sf_transport_4 (double x)
int gsl_sf_transport_4_e (double x, gsl_sf_result * result)
double gsl_sf_transport_5 (double x)
int gsl_sf_transport_5_e (double x, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/trig", ["gsl/gsl_sf_result.h","gsl/gsl_sf_trig.h"], ["gsl_sf_trig","gsl_sf"]}
double gsl_sf_sin (double x)
int gsl_sf_sin_e (double x, gsl_sf_result * result)
double gsl_sf_cos (double x)
int gsl_sf_cos_e (double x, gsl_sf_result * result)
double gsl_sf_hypot (double x, double y)
int gsl_sf_hypot_e (double x, double y, gsl_sf_result * result)
double gsl_sf_sinc (double x)
int gsl_sf_sinc_e (double x, gsl_sf_result * result)
int gsl_sf_complex_sin_e (double zr, double zi, gsl_sf_result * szr, gsl_sf_result * szi)
int gsl_sf_complex_cos_e (double zr, double zi, gsl_sf_result * czr, gsl_sf_result * czi)
int gsl_sf_complex_logsin_e (double zr, double zi, gsl_sf_result * lszr, gsl_sf_result * lszi)
double gsl_sf_lnsinh (double x)
int gsl_sf_lnsinh_e (double x, gsl_sf_result * result)
double gsl_sf_lncosh (double x)
int gsl_sf_lncosh_e (double x, gsl_sf_result * result)
int gsl_sf_polar_to_rect (double r, double theta, gsl_sf_result * x, gsl_sf_result * y);
int gsl_sf_rect_to_polar (double x, double y, gsl_sf_result * r, gsl_sf_result * theta)
double gsl_sf_angle_restrict_symm (double theta)
double gsl_sf_angle_restrict_pos (double theta)
int gsl_sf_sin_err_e (double x, double dx, gsl_sf_result * result)
int gsl_sf_cos_err_e (double x, double dx, gsl_sf_result * result)
# PACKAGE{"github.com/dtromb/gogsl/sf/zeta", ["gsl/gsl_sf_result.h","gsl/gsl_sf_zeta.h"], ["gsl_sf"]}
double gsl_sf_zeta_int (int n)
int gsl_sf_zeta_int_e (int n, gsl_sf_result * result)
double gsl_sf_zeta (double s)
int gsl_sf_zeta_e (double s, gsl_sf_result * result)
double gsl_sf_zetam1_int (int n)
int gsl_sf_zetam1_int_e (int n, gsl_sf_result * result)
double gsl_sf_zetam1 (double s)
int gsl_sf_zetam1_e (double s, gsl_sf_result * result)
double gsl_sf_hzeta (double s, double q)
int gsl_sf_hzeta_e (double s, double q, gsl_sf_result * result)
double gsl_sf_eta_int (int n)
int gsl_sf_eta_int_e (int n, gsl_sf_result * result)
double gsl_sf_eta (double s)
int gsl_sf_eta_e (double s, gsl_sf_result * result)


// Vector and matrix support.   GSL uses a system of prefixes to describe multiple 
// functions with similar signatures that take the various vector and matrix types.
// We support that here with a primitive templating feature.   
# SECTION{"Vectors and Matricies"}
# PACKAGE{"github.com/dtromb/gogsl/block",["gsl/gsl_block.h"],["gsl"]}

// Block support - basic arrays of raw C types with a unified interface.
# GSL_REFTYPE{"gsl_block",[]}
# NAME{"BlockAlloc"}
gsl_block * gsl_block_alloc (size_t n)
# NAME{"BlockCalloc"}
gsl_block * gsl_block_calloc (size_t n)
void gsl_block_free (gsl_block * b)
int gsl_block_fwrite (FILE * stream, const gsl_block * b)
int gsl_block_fread (FILE * stream, gsl_block * b)
# NEXTMAP{"3","STRING"}
int gsl_block_fprintf (FILE * stream, const gsl_block * b, const char * format)
int gsl_block_fscanf (FILE * stream, gsl_block * b)
# GSL_PREFIX_TEMPLATE_START{}
# GSL_REFTYPE{"gsl_block_$",[]}
# NAME{"Block%Alloc"}
gsl_block_$ * gsl_block_$_alloc (size_t n)
# NAME{"Block%Calloc"}
gsl_block_$ * gsl_block_$_calloc (size_t n)
void gsl_block_$_free (gsl_block_$ * b)
int gsl_block_$_fwrite (FILE * stream, const gsl_block_$ * b)
int gsl_block_$_fread (FILE * stream, gsl_block_$ * b)
# NEXTMAP{"3","STRING"}
int gsl_block_$_fprintf (FILE * stream, const gsl_block_$ * b, const char * format)
int gsl_block_$_fscanf (FILE * stream, gsl_block_$ * b)
# GSL_PREFIX_TEMPLATE_END{}

// Vector support.
# PACKAGE{"github.com/dtromb/gogsl/vector", ["gsl/gsl_vector.h","unistd.h"], ["gsl_vector"]}
# GSL_REFTYPE{"gsl_vector",[]}
# GSL_REFTYPE{"gsl_vector_view",["CData []byte"]}
# GSL_REFTYPE{"gsl_vector_const_view",["CData []byte"]}
// Complex vectors are declared up front here because some of the basic vector functions use this type.
# GSL_REFTYPE{"gsl_vector_complex",[]}
# NAME{"VectorAlloc"}
gsl_vector * gsl_vector_alloc (size_t n)
# NAME{"VectorCalloc"}
gsl_vector * gsl_vector_calloc (size_t n)
void gsl_vector_free (gsl_vector * v)
double gsl_vector_get (const gsl_vector * v, size_t i)
void gsl_vector_set (gsl_vector * v, size_t i, double x)
void gsl_vector_set_all (gsl_vector * v, double x)
void gsl_vector_set_zero (gsl_vector * v)
int gsl_vector_set_basis (gsl_vector * v, size_t i)
int gsl_vector_fwrite (FILE * stream, const gsl_vector * v)
int gsl_vector_fread (FILE * stream, gsl_vector * v)
# NEXTMAP{"3","STRING"}
int gsl_vector_fprintf (FILE * stream, const gsl_vector * v, const char * format)
int gsl_vector_fscanf (FILE * stream, gsl_vector * v)
gsl_vector_view gsl_vector_subvector (gsl_vector * v, size_t offset, size_t n)
gsl_vector_const_view gsl_vector_const_subvector (const gsl_vector * v, size_t offset, size_t n)
gsl_vector_view gsl_vector_subvector_with_stride (gsl_vector * v, size_t offset, size_t stride, size_t n)
gsl_vector_const_view gsl_vector_const_subvector_with_stride (const gsl_vector * v, size_t offset, size_t stride, size_t n)
gsl_vector_view gsl_vector_complex_real (gsl_vector_complex * v)
gsl_vector_const_view gsl_vector_complex_const_real (const gsl_vector_complex * v)
gsl_vector_view gsl_vector_complex_imag (gsl_vector_complex * v)
gsl_vector_const_view gsl_vector_complex_const_imag (const gsl_vector_complex * v)
int gsl_vector_memcpy (gsl_vector * dest, const gsl_vector * src)
int gsl_vector_swap (gsl_vector * v, gsl_vector * w)
int gsl_vector_swap_elements (gsl_vector * v, size_t i, size_t j)
int gsl_vector_reverse (gsl_vector * v)
int gsl_vector_add (gsl_vector * a, const gsl_vector * b)
int gsl_vector_sub (gsl_vector * a, const gsl_vector * b)
int gsl_vector_mul (gsl_vector * a, const gsl_vector * b)
int gsl_vector_div (gsl_vector * a, const gsl_vector * b)
int gsl_vector_scale (gsl_vector * a, const double x)
int gsl_vector_add_constant (gsl_vector * a, const double x)
double gsl_vector_max (const gsl_vector * v)
double gsl_vector_min (const gsl_vector * v)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_vector_minmax (const gsl_vector * v, double * min_out, double * max_out)
size_t gsl_vector_max_index (const gsl_vector * v)
size_t gsl_vector_min_index (const gsl_vector * v)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_vector_minmax_index (const gsl_vector * v, size_t * imin, size_t * imax)
int gsl_vector_isnull (const gsl_vector * v)
int gsl_vector_ispos (const gsl_vector * v)
int gsl_vector_isneg (const gsl_vector * v)
int gsl_vector_isnonneg (const gsl_vector * v)
int gsl_vector_equal (const gsl_vector * u, const gsl_vector * v)
# NEXTMAP{"1","SLICEPTR"}
gsl_vector_view gsl_vector_view_array (double * base, size_t n)
# NEXTMAP{"1","SLICEPTR"}
gsl_vector_const_view gsl_vector_const_view_array (const double * base, size_t n)
# NEXTMAP{"1","SLICEPTR"}
gsl_vector_view gsl_vector_view_array_with_stride (double * base, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
gsl_vector_const_view gsl_vector_const_view_array_with_stride (const double * base, size_t stride, size_t n)

# GSL_PREFIX_TEMPLATE_START{}
// Don't redefine gsl_vector_complex.
# TEMPLATE_EXCEPT{"complex"}
# GSL_REFTYPE{"gsl_vector_$",[]}
# GSL_REFTYPE{"gsl_vector_$_view",["CData []byte"]}
# GSL_REFTYPE{"gsl_vector_$_const_view",["CData []byte"]}
# NAME{"Vector%Alloc"}
gsl_vector_$ * gsl_vector_$_alloc (size_t n)
# NAME{"Vector%Calloc"}
gsl_vector_$ * gsl_vector_$_calloc (size_t n)
void gsl_vector_$_free (gsl_vector_$ * v)
@ gsl_vector_$_get (const gsl_vector_$ * v, size_t i)
void gsl_vector_$_set (gsl_vector_$ * v, size_t i, @ x)
void gsl_vector_$_set_all (gsl_vector_$ * v, @ x)
void gsl_vector_$_set_zero (gsl_vector_$ * v)
int gsl_vector_$_set_basis (gsl_vector_$ * v, size_t i)
int gsl_vector_$_fwrite (FILE * stream, const gsl_vector_$ * v)
int gsl_vector_$_fread (FILE * stream, gsl_vector_$ * v)
# NEXTMAP{"3","STRING"}
int gsl_vector_$_fprintf (FILE * stream, const gsl_vector_$ * v, const char * format)
int gsl_vector_$_fscanf (FILE * stream, gsl_vector_$ * v)
gsl_vector_$_view gsl_vector_$_subvector (gsl_vector_$ * v, size_t offset, size_t n)
gsl_vector_$_const_view gsl_vector_$_const_subvector (const gsl_vector_$ * v, size_t offset, size_t n)
gsl_vector_$_view gsl_vector_$_subvector_with_stride (gsl_vector_$ * v, size_t offset, size_t stride, size_t n)
gsl_vector_$_const_view gsl_vector_$_const_subvector_with_stride (const gsl_vector_$ * v, size_t offset, size_t stride, size_t n)
int gsl_vector_$_memcpy (gsl_vector_$ * dest, const gsl_vector_$ * src)
int gsl_vector_$_swap (gsl_vector_$ * v, gsl_vector_$ * w)
int gsl_vector_$_swap_elements (gsl_vector_$ * v, size_t i, size_t j)
int gsl_vector_$_reverse (gsl_vector_$ * v)
int gsl_vector_$_add (gsl_vector_$ * a, const gsl_vector_$ * b)
int gsl_vector_$_sub (gsl_vector_$ * a, const gsl_vector_$ * b)
int gsl_vector_$_mul (gsl_vector_$ * a, const gsl_vector_$ * b)
int gsl_vector_$_div (gsl_vector_$ * a, const gsl_vector_$ * b)
# NEXTMAP{"1","SLICEPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
gsl_vector_$_view gsl_vector_$_view_array (@ * base, size_t n)
# NEXTMAP{"1","SLICEPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
gsl_vector_$_const_view gsl_vector_$_const_view_array (const @ * base, size_t n)
# NEXTMAP{"1","SLICEPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
gsl_vector_$_view gsl_vector_$_view_array_with_stride (@ * base, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
gsl_vector_$_const_view gsl_vector_$_const_view_array_with_stride (const @ * base, size_t stride, size_t n)

// Since the next two functions take /double/ instead of the proper
// templated types for all non-complex types as a special case, we exclude 
// the complex types and expand them manually below.
# TEMPLATE_EXCEPT{["complex","complex_float"]}
int gsl_vector_$_scale (gsl_vector_$ * a, const double x)
# TEMPLATE_EXCEPT{["complex","complex_float"]}
int gsl_vector_$_add_constant (gsl_vector_$ * a, const double x)
// The next six min/max functions do not have complex type implementations,
// since a unique result value cannot be defined.
# TEMPLATE_EXCEPT{["complex","complex_float"]}
@ gsl_vector_$_max (const gsl_vector_$ * v)
# TEMPLATE_EXCEPT{["complex","complex_float"]}
@ gsl_vector_$_min (const gsl_vector_$ * v)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
void gsl_vector_$_minmax (const gsl_vector_$ * v, @ * min_out, @ * max_out)
# TEMPLATE_EXCEPT{["complex","complex_float"]}
size_t gsl_vector_$_max_index (const gsl_vector_$ * v)
# TEMPLATE_EXCEPT{["complex","complex_float"]}
size_t gsl_vector_$_min_index (const gsl_vector_$ * v)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
void gsl_vector_$_minmax_index (const gsl_vector_$ * v, size_t * imin, size_t * imax)
int gsl_vector_$_isnull (const gsl_vector_$ * v)
int gsl_vector_$_ispos (const gsl_vector_$ * v)
int gsl_vector_$_isneg (const gsl_vector_$ * v)
int gsl_vector_$_isnonneg (const gsl_vector_$ * v)
int gsl_vector_$_equal (const gsl_vector_$ * u, const gsl_vector_$ * v)
# GSL_PREFIX_TEMPLATE_END{}
// Expansions of the complex-special-case functions from above.
int gsl_vector_complex_scale (gsl_vector_complex * a, const gsl_complex x)
int gsl_vector_complex_float_scale (gsl_vector_complex_float * a, const gsl_complex_float x)
int gsl_vector_complex_add_constant (gsl_vector_complex * a, const gsl_complex x)
int gsl_vector_complex_float_add_constant (gsl_vector_complex_float * a, const gsl_complex_float x)
# NEXTMAP{"1","SLICEPTR"}
gsl_vector_complex_view gsl_vector_complex_view_array (double * base, size_t n)
# NEXTMAP{"1","SLICEPTR"}
gsl_vector_complex_const_view gsl_vector_complex_const_view_array (const double * base, size_t n)
# NEXTMAP{"1","SLICEPTR"}
gsl_vector_complex_view gsl_vector_complex_view_array_with_stride (double * base, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
gsl_vector_complex_const_view gsl_vector_complex_const_view_array_with_stride (const double * base, size_t stride, size_t n)

// Matrix support.
# PACKAGE{"github.com/dtromb/gogsl/matrix", ["gsl/gsl_matrix.h","unistd.h"], ["gsl_matrix"]}
# GSL_REFTYPE{"gsl_matrix",[]}
# GSL_REFTYPE{"gsl_matrix_view",["CData []byte"]}
# GSL_REFTYPE{"gsl_matrix_const_view",["CData []byte"]}
# NAME{"MatrixAlloc"}
gsl_matrix * gsl_matrix_alloc (size_t n1, size_t n2)
# NAME{"MatrixCalloc"}
gsl_matrix * gsl_matrix_calloc (size_t n1, size_t n2)
void gsl_matrix_free (gsl_matrix * m)
double gsl_matrix_get (const gsl_matrix * m, size_t i, size_t j)
void gsl_matrix_set (gsl_matrix * m, size_t i, size_t j, double x)
void gsl_matrix_set_all (gsl_matrix * m, double x)
void gsl_matrix_set_zero (gsl_matrix * m)
void gsl_matrix_set_identity (gsl_matrix * m)
int gsl_matrix_fwrite (FILE * stream, const gsl_matrix * m)
int gsl_matrix_fread (FILE * stream, gsl_matrix * m)
# NEXTMAP{"3","STRING"}
int gsl_matrix_fprintf (FILE * stream, const gsl_matrix * m, const char * format)
int gsl_matrix_fscanf (FILE * stream, gsl_matrix * m)

// XXX - template these next 4?
# NEXTMAP{"1","SLICEPTR"}
gsl_matrix_view gsl_matrix_view_array (double * base, size_t n1, size_t n2)
# NEXTMAP{"1","SLICEPTR"}
gsl_matrix_const_view gsl_matrix_const_view_array (const double * base, size_t n1, size_t n2)
# NEXTMAP{"1","SLICEPTR"}
gsl_matrix_view gsl_matrix_view_array_with_tda (double * base, size_t n1, size_t n2, size_t tda)
# NEXTMAP{"1","SLICEPTR"}
gsl_matrix_const_view gsl_matrix_const_view_array_with_tda (const double * base, size_t n1, size_t n2, size_t tda)
gsl_matrix_view gsl_matrix_submatrix (gsl_matrix * m, size_t k1, size_t k2, size_t n1, size_t n2)
gsl_matrix_const_view gsl_matrix_const_submatrix (const gsl_matrix * m, size_t k1, size_t k2, size_t n1, size_t n2)
gsl_matrix_view gsl_matrix_view_vector (gsl_vector * v, size_t n1, size_t n2)
gsl_matrix_const_view gsl_matrix_const_view_vector (const gsl_vector * v, size_t n1, size_t n2)
gsl_matrix_view gsl_matrix_view_vector_with_tda (gsl_vector * v, size_t n1, size_t n2, size_t tda)
gsl_matrix_const_view gsl_matrix_const_view_vector_with_tda (const gsl_vector * v, size_t n1, size_t n2, size_t tda)
gsl_vector_view gsl_matrix_row (gsl_matrix * m, size_t i)
gsl_vector_const_view gsl_matrix_const_row (const gsl_matrix * m, size_t i)
gsl_vector_view gsl_matrix_column (gsl_matrix * m, size_t j)
gsl_vector_const_view gsl_matrix_const_column (const gsl_matrix * m, size_t j)
gsl_vector_view gsl_matrix_subrow (gsl_matrix * m, size_t i, size_t offset, size_t n)
gsl_vector_const_view gsl_matrix_const_subrow (const gsl_matrix * m, size_t i, size_t offset, size_t n)
gsl_vector_view gsl_matrix_subcolumn (gsl_matrix * m, size_t j, size_t offset, size_t n)
gsl_vector_const_view gsl_matrix_const_subcolumn (const gsl_matrix * m, size_t j, size_t offset, size_t n)
gsl_vector_view gsl_matrix_diagonal (gsl_matrix * m)
gsl_vector_const_view gsl_matrix_const_diagonal (const gsl_matrix * m)
gsl_vector_view gsl_matrix_subdiagonal (gsl_matrix * m, size_t k)
gsl_vector_const_view gsl_matrix_const_subdiagonal (const gsl_matrix * m, size_t k)
gsl_vector_view gsl_matrix_superdiagonal (gsl_matrix * m, size_t k)
gsl_vector_const_view gsl_matrix_const_superdiagonal (const gsl_matrix * m, size_t k)
int gsl_matrix_memcpy (gsl_matrix * dest, const gsl_matrix * src)
int gsl_matrix_swap (gsl_matrix * m1, gsl_matrix * m2)
int gsl_matrix_get_row (gsl_vector * v, const gsl_matrix * m, size_t i)
int gsl_matrix_get_col (gsl_vector * v, const gsl_matrix * m, size_t j)
int gsl_matrix_set_row (gsl_matrix * m, size_t i, const gsl_vector * v)
int gsl_matrix_set_col (gsl_matrix * m, size_t j, const gsl_vector * v)
int gsl_matrix_swap_rows (gsl_matrix * m, size_t i, size_t j)
int gsl_matrix_swap_columns (gsl_matrix * m, size_t i, size_t j)
int gsl_matrix_swap_rowcol (gsl_matrix * m, size_t i, size_t j)
int gsl_matrix_transpose_memcpy (gsl_matrix * dest, const gsl_matrix * src)
int gsl_matrix_transpose (gsl_matrix * m)
int gsl_matrix_add (gsl_matrix * a, const gsl_matrix * b)
int gsl_matrix_sub (gsl_matrix * a, const gsl_matrix * b)
int gsl_matrix_mul_elements (gsl_matrix * a, const gsl_matrix * b)
int gsl_matrix_div_elements (gsl_matrix * a, const gsl_matrix * b)
int gsl_matrix_scale (gsl_matrix * a, const double x)
int gsl_matrix_add_constant (gsl_matrix * a, const double x)
double gsl_matrix_max (const gsl_matrix * m)
double gsl_matrix_min (const gsl_matrix * m)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_matrix_minmax (const gsl_matrix * m, double * min_out, double * max_out)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_matrix_max_index (const gsl_matrix * m, size_t * imax, size_t * jmax)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_matrix_min_index (const gsl_matrix * m, size_t * imin, size_t * jmin)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
void gsl_matrix_minmax_index (const gsl_matrix * m, size_t * imin, size_t * jmin, size_t * imax, size_t * jmax)
int gsl_matrix_isnull (const gsl_matrix * m)
int gsl_matrix_ispos (const gsl_matrix * m)
int gsl_matrix_isneg (const gsl_matrix * m)
int gsl_matrix_isnonneg (const gsl_matrix * m)
int gsl_matrix_equal (const gsl_matrix * a, const gsl_matrix * b)
# GSL_PREFIX_TEMPLATE_START{}
# GSL_REFTYPE{"gsl_matrix_$",[]}
# GSL_REFTYPE{"gsl_matrix_$_view",["CData []byte"]}
# GSL_REFTYPE{"gsl_matrix_$_const_view",["CData []byte"]}
# NAME{"Matrix%Alloc"}
gsl_matrix_$ * gsl_matrix_$_alloc (size_t n1, size_t n2)
# NAME{"Matrix%Calloc"}
gsl_matrix_$ * gsl_matrix_$_calloc (size_t n1, size_t n2)
void gsl_matrix_$_free (gsl_matrix_$ * m)
@ gsl_matrix_$_get (const gsl_matrix_$ * m, size_t i, size_t j)
void gsl_matrix_$_set (gsl_matrix_$ * m, size_t i, size_t j, @ x)
void gsl_matrix_$_set_all (gsl_matrix_$ * m, @ x)
void gsl_matrix_$_set_zero (gsl_matrix_$ * m)
void gsl_matrix_$_set_identity (gsl_matrix_$ * m)
int gsl_matrix_$_fwrite (FILE * stream, const gsl_matrix_$ * m)
int gsl_matrix_$_fread (FILE * stream, gsl_matrix_$ * m)
# NEXTMAP{"3","STRING"}
int gsl_matrix_$_fprintf (FILE * stream, const gsl_matrix_$ * m, const char * format)
int gsl_matrix_$_fscanf (FILE * stream, gsl_matrix_$ * m)
gsl_matrix_$_view gsl_matrix_$_submatrix (gsl_matrix_$ * m, size_t k1, size_t k2, size_t n1, size_t n2)
gsl_matrix_$_const_view gsl_matrix_$_const_submatrix (const gsl_matrix_$ * m, size_t k1, size_t k2, size_t n1, size_t n2)
gsl_matrix_$_view gsl_matrix_$_view_vector (gsl_vector_$ * v, size_t n1, size_t n2)
gsl_matrix_$_const_view gsl_matrix_$_const_view_vector (const gsl_vector_$ * v, size_t n1, size_t n2)
gsl_matrix_$_view gsl_matrix_$_view_vector_with_tda (gsl_vector_$ * v, size_t n1, size_t n2, size_t tda)
gsl_matrix_$_const_view gsl_matrix_$_const_view_vector_with_tda (const gsl_vector_$ * v, size_t n1, size_t n2, size_t tda)
gsl_vector_$_view gsl_matrix_$_row (gsl_matrix_$ * m, size_t i)
gsl_vector_$_const_view gsl_matrix_$_const_row (const gsl_matrix_$ * m, size_t i)
gsl_vector_$_view gsl_matrix_$_column (gsl_matrix_$ * m, size_t j)
gsl_vector_$_const_view gsl_matrix_$_const_column (const gsl_matrix_$ * m, size_t j)
gsl_vector_$_view gsl_matrix_$_subrow (gsl_matrix_$ * m, size_t i, size_t offset, size_t n)
gsl_vector_$_const_view gsl_matrix_$_const_subrow (const gsl_matrix_$ * m, size_t i, size_t offset, size_t n)
gsl_vector_$_view gsl_matrix_$_subcolumn (gsl_matrix_$ * m, size_t j, size_t offset, size_t n)
gsl_vector_$_const_view gsl_matrix_$_const_subcolumn (const gsl_matrix_$* m, size_t j, size_t offset, size_t n)
gsl_vector_$_view gsl_matrix_$_diagonal (gsl_matrix_$ * m)
gsl_vector_$_const_view gsl_matrix_$_const_diagonal (const gsl_matrix_$ * m)
gsl_vector_$_view gsl_matrix_$_subdiagonal (gsl_matrix_$ * m, size_t k)
gsl_vector_$_const_view gsl_matrix_$_const_subdiagonal (const gsl_matrix_$ * m, size_t k)
gsl_vector_$_view gsl_matrix_$_superdiagonal (gsl_matrix_$ * m, size_t k)
gsl_vector_$_const_view gsl_matrix_$_const_superdiagonal (const gsl_matrix_$ * m, size_t k)
int gsl_matrix_$_memcpy (gsl_matrix_$ * dest, const gsl_matrix_$ * src)
int gsl_matrix_$_swap (gsl_matrix_$ * m1, gsl_matrix_$ * m2)
int gsl_matrix_$_get_row (gsl_vector_$ * v, const gsl_matrix_$ * m, size_t i)
int gsl_matrix_$_get_col (gsl_vector_$ * v, const gsl_matrix_$ * m, size_t j)
int gsl_matrix_$_set_row (gsl_matrix_$ * m, size_t i, const gsl_vector_$ * v)
int gsl_matrix_$_set_col (gsl_matrix_$ * m, size_t j, const gsl_vector_$ * v)
int gsl_matrix_$_swap_rows (gsl_matrix_$ * m, size_t i, size_t j)
int gsl_matrix_$_swap_columns (gsl_matrix_$ * m, size_t i, size_t j)
int gsl_matrix_$_swap_rowcol (gsl_matrix_$ * m, size_t i, size_t j)
int gsl_matrix_$_transpose_memcpy (gsl_matrix_$ * dest, const gsl_matrix_$ * src)
int gsl_matrix_$_transpose (gsl_matrix_$ * m)
int gsl_matrix_$_add (gsl_matrix_$ * a, const gsl_matrix_$ * b)
int gsl_matrix_$_sub (gsl_matrix_$ * a, const gsl_matrix_$ * b)
int gsl_matrix_$_mul_elements (gsl_matrix_$ * a, const gsl_matrix_$ * b)
int gsl_matrix_$_div_elements (gsl_matrix_$ * a, const gsl_matrix_$ * b)
// Complex-valued types are expanded manually below; they do not take double arguments.
# TEMPLATE_EXCEPT{["complex","complex_float"]}
int gsl_matrix_$_scale (gsl_matrix_$ * a, const double x)
# TEMPLATE_EXCEPT{["complex","complex_float"]}
int gsl_matrix_$_add_constant (gsl_matrix_$ * a, const double x)
// Minimum/Maximum functions are not defined for complex matrix types.
# TEMPLATE_EXCEPT{["complex","complex_float"]}
@ gsl_matrix_$_max (const gsl_matrix_$ * m)
# TEMPLATE_EXCEPT{["complex","complex_float"]}
@ gsl_matrix_$_min (const gsl_matrix_$ * m)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
void gsl_matrix_$_minmax (const gsl_matrix_$ * m, @ * min_out, @ * max_out)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
void gsl_matrix_$_max_index (const gsl_matrix_$ * m, size_t * imax, size_t * jmax)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
void gsl_matrix_$_min_index (const gsl_matrix_$ * m, size_t * imin, size_t * jmin)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
# TEMPLATE_EXCEPT{["complex","complex_float"]}
void gsl_matrix_$_minmax_index (const gsl_matrix_$ * m, size_t * imin, size_t * jmin, size_t * imax, size_t * jmax)
int gsl_matrix_$_isnull (const gsl_matrix_$ * m)
int gsl_matrix_$_ispos (const gsl_matrix_$ * m)
int gsl_matrix_$_isneg (const gsl_matrix_$ * m)
int gsl_matrix_$_isnonneg (const gsl_matrix_$ * m)
int gsl_matrix_$_equal (const gsl_matrix_$ * a, const gsl_matrix_$ * b)
# GSL_PREFIX_TEMPLATE_END{}
// Complex-valued scale/plus-constant functions.
int gsl_matrix_complex_scale (gsl_matrix_complex * a, const gsl_complex x)
int gsl_matrix_complex_float_scale (gsl_matrix_complex_float * a, const gsl_complex_float x)
int gsl_matrix_complex_add_constant (gsl_matrix_complex * a, const gsl_complex x)
int gsl_matrix_complex_float_add_constant (gsl_matrix_complex_float * a, const gsl_complex_float x)

// Enumerated permuations.
# SECTION{"Permutations"}
# PACKAGE{"github.com/dtromb/gogsl/permutation",["gsl/gsl_permutation.h","gsl/gsl_permute_vector.h","unistd.h"],["gsl_permutation","gsl"]}
# GSL_REFTYPE{"gsl_permutation",[]}
# NAME{"PermutationAlloc"}
gsl_permutation * gsl_permutation_alloc (size_t n)
# NAME{"PermutationCalloc"}
gsl_permutation * gsl_permutation_calloc (size_t n)
# NAME{"PermutationInit"}
void gsl_permutation_init (gsl_permutation * p)
void gsl_permutation_free (gsl_permutation * p)
int gsl_permutation_memcpy (gsl_permutation * dest, const gsl_permutation * src)
size_t gsl_permutation_get (const gsl_permutation * p, const size_t i)
int gsl_permutation_swap (gsl_permutation * p, const size_t i, const size_t j)
size_t gsl_permutation_size (const gsl_permutation * p)
int gsl_permutation_valid (const gsl_permutation * p)
void gsl_permutation_reverse (gsl_permutation * p)
int gsl_permutation_inverse (gsl_permutation * inv, const gsl_permutation * p)
int gsl_permutation_next (gsl_permutation * p)
int gsl_permutation_prev (gsl_permutation * p)
int gsl_permute_vector (const gsl_permutation * p, gsl_vector * v)
int gsl_permute_vector_inverse (const gsl_permutation * p, gsl_vector * v)
int gsl_permutation_mul (gsl_permutation * p, const gsl_permutation * pa, const gsl_permutation * pb)
int gsl_permutation_fwrite (FILE * stream, const gsl_permutation * p)
int gsl_permutation_fread (FILE * stream, gsl_permutation * p)
# NEXTMAP{"3","STRING"}
int gsl_permutation_fprintf (FILE * stream, const gsl_permutation * p, const char * format)
int gsl_permutation_fscanf (FILE * stream, gsl_permutation * p)
int gsl_permutation_linear_to_canonical (gsl_permutation * q, const gsl_permutation * p)
int gsl_permutation_canonical_to_linear (gsl_permutation * p, const gsl_permutation * q)
size_t gsl_permutation_inversions (const gsl_permutation * p)
size_t gsl_permutation_linear_cycles (const gsl_permutation * p)
size_t gsl_permutation_canonical_cycles (const gsl_permutation * q)


// Enumerated combinations.
# SECTION{"Combinations"}
# PACKAGE{"github.com/dtromb/gogsl/combination", ["gsl/gsl_combination.h","unistd.h"],["gsl_combination","gsl"]}
#GSL_REFTYPE{"gsl_combination",[]}
# NAME{"CombinationAlloc"}
gsl_combination * gsl_combination_alloc (size_t n, size_t k)
# NAME{"CombinationCalloc"}
gsl_combination * gsl_combination_calloc (size_t n, size_t k)
void gsl_combination_init_first (gsl_combination * c)
void gsl_combination_init_last (gsl_combination * c)
void gsl_combination_free (gsl_combination * c)
int gsl_combination_memcpy (gsl_combination * dest, const gsl_combination * src)
size_t gsl_combination_get (const gsl_combination * c, const size_t i)
size_t gsl_combination_n (const gsl_combination * c)
size_t gsl_combination_k (const gsl_combination * c)
int gsl_combination_valid (gsl_combination * c)
int gsl_combination_next (gsl_combination * c)
int gsl_combination_prev (gsl_combination * c)
int gsl_combination_fwrite (FILE * stream, const gsl_combination * c)
int gsl_combination_fread (FILE * stream, gsl_combination * c)
# NEXTMAP{"3","STRING"}
int gsl_combination_fprintf (FILE * stream, const gsl_combination * c, const char * format)
int gsl_combination_fscanf (FILE * stream, gsl_combination * c)

// Enumerated multiset presentations.
# SECTION{"Multisets"}
# PACKAGE{"github.com/dtromb/gogsl/multiset", ["gsl/gsl_multiset.h","unistd.h"],["gsl_multiset"]}
# GSL_REFTYPE{"gsl_multiset",[]}
# NAME{"MultisetAlloc"}
gsl_multiset * gsl_multiset_alloc (size_t n, size_t k)
# NAME{"MultisetCalloc"}
gsl_multiset * gsl_multiset_calloc (size_t n, size_t k)
void gsl_multiset_init_first (gsl_multiset * c)
void gsl_multiset_init_last (gsl_multiset * c)
void gsl_multiset_free (gsl_multiset * c)
int gsl_multiset_memcpy (gsl_multiset * dest, const gsl_multiset * src)
size_t gsl_multiset_get (const gsl_multiset * c, const size_t i)
size_t gsl_multiset_n (const gsl_multiset * c)
size_t gsl_multiset_k (const gsl_multiset * c)
int gsl_multiset_valid (gsl_multiset * c)
int gsl_multiset_next (gsl_multiset * c)
int gsl_multiset_prev (gsl_multiset * c)
int gsl_multiset_fwrite (FILE * stream, const gsl_multiset * c)
int gsl_multiset_fread (FILE * stream, gsl_multiset * c)
# NEXTMAP{"3","STRING"}
int gsl_multiset_fprintf (FILE * stream, const gsl_multiset * c, const char * format)
int gsl_multiset_fscanf (FILE * stream, gsl_multiset * c)

// Sorting methods.
# SECTION{"Sorting"}
# PACKAGE{"github.com/dtromb/gogsl/sort", ["gsl/gsl_complex.h","gsl/gsl_heapsort.h","gsl/gsl_sort.h","gsl/gsl_sort_vector.h"],["gsl"]}
// The GSL qsort() replacement functions are implemented manually in \
// heapsort_support.go, so they do not appear here.
//
// None of the sorting functions are implemented for the complex types, as they do not
// have a natural order.
# NEXTMAP{"1","SLICEPTR"}
void gsl_sort (double * data, const size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
void gsl_sort2 (double * data1, const size_t stride1, double * data2, const size_t stride2, size_t n)
void gsl_sort_vector (gsl_vector * v)
void gsl_sort_vector2 (gsl_vector * v1, gsl_vector * v2)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"2","SLICEPTR"}
void gsl_sort_index (size_t * p, const double * data, size_t stride, size_t n)
int gsl_sort_vector_index (gsl_permutation * p, const gsl_vector * v)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
int gsl_sort_smallest (double * dest, size_t k, const double * src, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
int gsl_sort_largest (double * dest, size_t k, const double * src, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
int gsl_sort_vector_smallest (double * dest, size_t k, const gsl_vector * v)
# NEXTMAP{"1","SLICEPTR"}
int gsl_sort_vector_largest (double * dest, size_t k, const gsl_vector * v)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
int gsl_sort_smallest_index (size_t * p, size_t k, const double * src, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
int gsl_sort_largest_index (size_t * p, size_t k, const double * src, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
int gsl_sort_vector_smallest_index (size_t * p, size_t k, const gsl_vector * v)
# NEXTMAP{"1","SLICEPTR"}
int gsl_sort_vector_largest_index (size_t * p, size_t k, const gsl_vector * v)

# GSL_PREFIX_TEMPLATE_START{[],["complex","complex_float"]}
# NEXTMAP{"1","SLICEPTR"}
void gsl_sort_$ (@ * data, const size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
void gsl_sort2_$ (@ * data1, const size_t stride1, @ * data2, const size_t stride2, size_t n)
void gsl_sort_vector_$ (gsl_vector_$ * v)
void gsl_sort_vector2_$ (gsl_vector_$ * v1, gsl_vector_$ * v2)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"2","SLICEPTR"}
void gsl_sort_$_index (size_t * p, const @ * data, size_t stride, size_t n)
int gsl_sort_vector_$_index (gsl_permutation * p, const gsl_vector_$ * v)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
int gsl_sort_$_smallest (@ * dest, size_t k, const @ * src, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
int gsl_sort_$_largest (@ * dest, size_t k, const @ * src, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
int gsl_sort_vector_$_smallest (@ * dest, size_t k, const gsl_vector_$ * v)
# NEXTMAP{"1","SLICEPTR"}
int gsl_sort_vector_$_largest (@ * dest, size_t k, const gsl_vector_$ * v)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
int gsl_sort_$_smallest_index (size_t * p, size_t k, const @ * src, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
int gsl_sort_$_largest_index (size_t * p, size_t k, const @ * src, size_t stride, size_t n)
# NEXTMAP{"1","SLICEPTR"}
int gsl_sort_vector_$_smallest_index (size_t * p, size_t k, const gsl_vector_$ * v)
# NEXTMAP{"1","SLICEPTR"}
int gsl_sort_vector_$_largest_index (size_t * p, size_t k, const gsl_vector_$ * v)
# GSL_PREFIX_TEMPLATE_END{}

// BLAS linear algebra library support.
# SECTION{"BLAS"}
# PACKAGE{"github.com/dtromb/gogsl/blas", ["gsl/gsl_blas.h","unistd.h"],["gsl_blas"]}
# TYPEMAP{"CBLAS_INDEX_t","Index","C.size_t"}
# TYPEMAP{"CBLAS_TRANSPOSE_t","Transpose","C.CBLAS_TRANSPOSE_t"}
# TYPEMAP{"CBLAS_ORDER_t","Order","C.CBLAS_ORDER_t"}
# TYPEMAP{"CBLAS_UPLO_t","Uplo","C.CBLAS_UPLO_t"}
# TYPEMAP{"CBLAS_DIAG_t","Diag","C.CBLAS_DIAG_t"}
# TYPEMAP{"CBLAS_SIDE_t","Side","C.CBLAS_SIDE_t"}
# NEXTMAP{"4","OUTPTR"}
int gsl_blas_sdsdot (float alpha, const gsl_vector_float * x, const gsl_vector_float * y, float * result)
# NEXTMAP{"3","OUTPTR"}
int gsl_blas_sdot (const gsl_vector_float * x, const gsl_vector_float * y, float * result)
# NEXTMAP{"3","OUTPTR"}
int gsl_blas_dsdot (const gsl_vector_float * x, const gsl_vector_float * y, double * result)
# NEXTMAP{"3","OUTPTR"}
int gsl_blas_ddot (const gsl_vector * x, const gsl_vector * y, double * result)
# NEXTMAP{"3","OUTPTR"}
int gsl_blas_cdotu (const gsl_vector_complex_float * x, const gsl_vector_complex_float * y, gsl_complex_float * dotu)
# NEXTMAP{"3","OUTPTR"}
int gsl_blas_zdotu (const gsl_vector_complex * x, const gsl_vector_complex * y, gsl_complex * dotu)
# NEXTMAP{"3","OUTPTR"}
int gsl_blas_cdotc (const gsl_vector_complex_float * x, const gsl_vector_complex_float * y, gsl_complex_float * dotc)
# NEXTMAP{"3","OUTPTR"}
int gsl_blas_zdotc (const gsl_vector_complex * x, const gsl_vector_complex * y, gsl_complex * dotc)
float gsl_blas_snrm2 (const gsl_vector_float * x)
double gsl_blas_dnrm2 (const gsl_vector * x)
float gsl_blas_scnrm2 (const gsl_vector_complex_float * x)
double gsl_blas_dznrm2 (const gsl_vector_complex * x)
float gsl_blas_sasum (const gsl_vector_float * x)
double gsl_blas_dasum (const gsl_vector * x)
float gsl_blas_scasum (const gsl_vector_complex_float * x)
double gsl_blas_dzasum (const gsl_vector_complex * x)
CBLAS_INDEX_t gsl_blas_isamax (const gsl_vector_float * x)
CBLAS_INDEX_t gsl_blas_idamax (const gsl_vector * x)
CBLAS_INDEX_t gsl_blas_icamax (const gsl_vector_complex_float * x)
CBLAS_INDEX_t gsl_blas_izamax (const gsl_vector_complex * x)
int gsl_blas_sswap (gsl_vector_float * x, gsl_vector_float * y)
int gsl_blas_dswap (gsl_vector * x, gsl_vector * y)
int gsl_blas_cswap (gsl_vector_complex_float * x, gsl_vector_complex_float * y)
int gsl_blas_zswap (gsl_vector_complex * x, gsl_vector_complex * y)
int gsl_blas_scopy (const gsl_vector_float * x, gsl_vector_float * y)
int gsl_blas_dcopy (const gsl_vector * x, gsl_vector * y)
int gsl_blas_ccopy (const gsl_vector_complex_float * x, gsl_vector_complex_float * y)
int gsl_blas_zcopy (const gsl_vector_complex * x, gsl_vector_complex * y)
int gsl_blas_saxpy (float alpha, const gsl_vector_float * x, gsl_vector_float * y)
int gsl_blas_daxpy (double alpha, const gsl_vector * x, gsl_vector * y)
int gsl_blas_caxpy (const gsl_complex_float alpha, const gsl_vector_complex_float * x, gsl_vector_complex_float * y)
int gsl_blas_zaxpy (const gsl_complex alpha, const gsl_vector_complex * x, gsl_vector_complex * y)
void gsl_blas_sscal (float alpha, gsl_vector_float * x)
void gsl_blas_dscal (double alpha, gsl_vector * x)
void gsl_blas_cscal (const gsl_complex_float alpha, gsl_vector_complex_float * x)
void gsl_blas_zscal (const gsl_complex alpha, gsl_vector_complex * x)
void gsl_blas_csscal (float alpha, gsl_vector_complex_float * x)
void gsl_blas_zdscal (double alpha, gsl_vector_complex * x)
int gsl_blas_srotg (float a[], float b[], float c[], float s[])
int gsl_blas_drotg (double a[], double b[], double c[], double s[])
int gsl_blas_srot (gsl_vector_float * x, gsl_vector_float * y, float c, float s)
int gsl_blas_drot (gsl_vector * x, gsl_vector * y, const double c, const double s)
int gsl_blas_srotmg (float d1[], float d2[], float b1[], float b2, float P[])
int gsl_blas_drotmg (double d1[], double d2[], double b1[], double b2, double P[])
int gsl_blas_srotm (gsl_vector_float * x, gsl_vector_float * y, const float P[])
int gsl_blas_drotm (gsl_vector * x, gsl_vector * y, const double P[])
int gsl_blas_sgemv (CBLAS_TRANSPOSE_t TransA, float alpha, const gsl_matrix_float * A, const gsl_vector_float * x, float beta, gsl_vector_float * y)
int gsl_blas_dgemv (CBLAS_TRANSPOSE_t TransA, double alpha, const gsl_matrix * A, const gsl_vector * x, double beta, gsl_vector * y)
int gsl_blas_cgemv (CBLAS_TRANSPOSE_t TransA, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, const gsl_vector_complex_float * x, const gsl_complex_float beta, gsl_vector_complex_float * y)
int gsl_blas_zgemv (CBLAS_TRANSPOSE_t TransA, const gsl_complex alpha, const gsl_matrix_complex * A, const gsl_vector_complex * x, const gsl_complex beta, gsl_vector_complex * y)
int gsl_blas_strmv (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_matrix_float * A, gsl_vector_float * x)
int gsl_blas_dtrmv (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_matrix * A, gsl_vector * x)
int gsl_blas_ctrmv (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_matrix_complex_float * A, gsl_vector_complex_float * x)
int gsl_blas_ztrmv (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_matrix_complex * A, gsl_vector_complex * x)
int gsl_blas_strsv (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_matrix_float * A, gsl_vector_float * x)
int gsl_blas_dtrsv (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_matrix * A, gsl_vector * x)
int gsl_blas_ctrsv (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_matrix_complex_float * A, gsl_vector_complex_float * x)
int gsl_blas_ztrsv (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_matrix_complex * A, gsl_vector_complex * x)
int gsl_blas_ssymv (CBLAS_UPLO_t Uplo, float alpha, const gsl_matrix_float * A, const gsl_vector_float * x, float beta, gsl_vector_float * y)
int gsl_blas_dsymv (CBLAS_UPLO_t Uplo, double alpha, const gsl_matrix * A, const gsl_vector * x, double beta, gsl_vector * y)
int gsl_blas_chemv (CBLAS_UPLO_t Uplo, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, const gsl_vector_complex_float * x, const gsl_complex_float beta, gsl_vector_complex_float * y)
int gsl_blas_zhemv (CBLAS_UPLO_t Uplo, const gsl_complex alpha, const gsl_matrix_complex * A, const gsl_vector_complex * x, const gsl_complex beta, gsl_vector_complex * y)
int gsl_blas_sger (float alpha, const gsl_vector_float * x, const gsl_vector_float * y, gsl_matrix_float * A)
int gsl_blas_dger (double alpha, const gsl_vector * x, const gsl_vector * y, gsl_matrix * A)
int gsl_blas_cgeru (const gsl_complex_float alpha, const gsl_vector_complex_float * x, const gsl_vector_complex_float * y, gsl_matrix_complex_float * A)
int gsl_blas_zgeru (const gsl_complex alpha, const gsl_vector_complex * x, const gsl_vector_complex * y, gsl_matrix_complex * A)
int gsl_blas_cgerc (const gsl_complex_float alpha, const gsl_vector_complex_float * x, const gsl_vector_complex_float * y, gsl_matrix_complex_float * A)
int gsl_blas_zgerc (const gsl_complex alpha, const gsl_vector_complex * x, const gsl_vector_complex * y, gsl_matrix_complex * A)
int gsl_blas_ssyr (CBLAS_UPLO_t Uplo, float alpha, const gsl_vector_float * x, gsl_matrix_float * A)
int gsl_blas_dsyr (CBLAS_UPLO_t Uplo, double alpha, const gsl_vector * x, gsl_matrix * A)
int gsl_blas_cher (CBLAS_UPLO_t Uplo, float alpha, const gsl_vector_complex_float * x, gsl_matrix_complex_float * A)
int gsl_blas_zher (CBLAS_UPLO_t Uplo, double alpha, const gsl_vector_complex * x, gsl_matrix_complex * A)
int gsl_blas_ssyr2 (CBLAS_UPLO_t Uplo, float alpha, const gsl_vector_float * x, const gsl_vector_float * y, gsl_matrix_float * A)
int gsl_blas_dsyr2 (CBLAS_UPLO_t Uplo, double alpha, const gsl_vector * x, const gsl_vector * y, gsl_matrix * A)
int gsl_blas_cher2 (CBLAS_UPLO_t Uplo, const gsl_complex_float alpha, const gsl_vector_complex_float * x, const gsl_vector_complex_float * y, gsl_matrix_complex_float * A)
int gsl_blas_zher2 (CBLAS_UPLO_t Uplo, const gsl_complex alpha, const gsl_vector_complex * x, const gsl_vector_complex * y, gsl_matrix_complex * A)
int gsl_blas_sgemm (CBLAS_TRANSPOSE_t TransA, CBLAS_TRANSPOSE_t TransB, float alpha, const gsl_matrix_float * A, const gsl_matrix_float * B, float beta, gsl_matrix_float * C)
int gsl_blas_dgemm (CBLAS_TRANSPOSE_t TransA, CBLAS_TRANSPOSE_t TransB, double alpha, const gsl_matrix * A, const gsl_matrix * B, double beta, gsl_matrix * C)
int gsl_blas_cgemm (CBLAS_TRANSPOSE_t TransA, CBLAS_TRANSPOSE_t TransB, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, const gsl_matrix_complex_float * B, const gsl_complex_float beta, gsl_matrix_complex_float * C)
int gsl_blas_zgemm (CBLAS_TRANSPOSE_t TransA, CBLAS_TRANSPOSE_t TransB, const gsl_complex alpha, const gsl_matrix_complex * A, const gsl_matrix_complex * B, const gsl_complex beta, gsl_matrix_complex * C)
int gsl_blas_ssymm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, float alpha, const gsl_matrix_float * A, const gsl_matrix_float * B, float beta, gsl_matrix_float * C)
int gsl_blas_dsymm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, double alpha, const gsl_matrix * A, const gsl_matrix * B, double beta, gsl_matrix * C)
int gsl_blas_csymm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, const gsl_matrix_complex_float * B, const gsl_complex_float beta, gsl_matrix_complex_float * C)
int gsl_blas_zsymm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, const gsl_complex alpha, const gsl_matrix_complex * A, const gsl_matrix_complex * B, const gsl_complex beta, gsl_matrix_complex * C)
int gsl_blas_chemm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, const gsl_matrix_complex_float * B, const gsl_complex_float beta, gsl_matrix_complex_float * C)
int gsl_blas_zhemm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, const gsl_complex alpha, const gsl_matrix_complex * A, const gsl_matrix_complex * B, const gsl_complex beta, gsl_matrix_complex * C)
int gsl_blas_strmm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, float alpha, const gsl_matrix_float * A, gsl_matrix_float * B)
int gsl_blas_dtrmm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, double alpha, const gsl_matrix * A, gsl_matrix * B)
int gsl_blas_ctrmm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, gsl_matrix_complex_float * B)
int gsl_blas_ztrmm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_complex alpha, const gsl_matrix_complex * A, gsl_matrix_complex * B)
int gsl_blas_strsm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, float alpha, const gsl_matrix_float * A, gsl_matrix_float * B)
int gsl_blas_dtrsm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, double alpha, const gsl_matrix * A, gsl_matrix * B)
int gsl_blas_ctrsm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, gsl_matrix_complex_float * B)
int gsl_blas_ztrsm (CBLAS_SIDE_t Side, CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t TransA, CBLAS_DIAG_t Diag, const gsl_complex alpha, const gsl_matrix_complex * A, gsl_matrix_complex * B)
int gsl_blas_ssyrk (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, float alpha, const gsl_matrix_float * A, float beta, gsl_matrix_float * C)
int gsl_blas_dsyrk (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, double alpha, const gsl_matrix * A, double beta, gsl_matrix * C)
int gsl_blas_csyrk (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, const gsl_complex_float beta, gsl_matrix_complex_float * C)
int gsl_blas_zsyrk (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, const gsl_complex alpha, const gsl_matrix_complex * A, const gsl_complex beta, gsl_matrix_complex * C)
int gsl_blas_cherk (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, float alpha, const gsl_matrix_complex_float * A, float beta, gsl_matrix_complex_float * C)
int gsl_blas_zherk (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, double alpha, const gsl_matrix_complex * A, double beta, gsl_matrix_complex * C)
int gsl_blas_ssyr2k (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, float alpha, const gsl_matrix_float * A, const gsl_matrix_float * B, float beta, gsl_matrix_float * C)
int gsl_blas_dsyr2k (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, double alpha, const gsl_matrix * A, const gsl_matrix * B, double beta, gsl_matrix * C)
int gsl_blas_csyr2k (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, const gsl_matrix_complex_float * B, const gsl_complex_float beta, gsl_matrix_complex_float * C)
int gsl_blas_zsyr2k (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, const gsl_complex alpha, const gsl_matrix_complex * A, const gsl_matrix_complex * B, const gsl_complex beta, gsl_matrix_complex * C)
int gsl_blas_cher2k (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, const gsl_complex_float alpha, const gsl_matrix_complex_float * A, const gsl_matrix_complex_float * B, float beta, gsl_matrix_complex_float * C)
int gsl_blas_zher2k (CBLAS_UPLO_t Uplo, CBLAS_TRANSPOSE_t Trans, const gsl_complex alpha, const gsl_matrix_complex * A, const gsl_matrix_complex * B, double beta, gsl_matrix_complex * C)

# SECTION{"Linear Algebra"}
# PACKAGE{"github.com/dtromb/gogsl/linalg", ["gsl/gsl_linalg.h"],["gsl_linalg"]}
# NEXTMAP{"3","OUTPTR"}
int gsl_linalg_LU_decomp (gsl_matrix * A, gsl_permutation * p, int * signum)
# NEXTMAP{"3","OUTPTR"}
int gsl_linalg_complex_LU_decomp (gsl_matrix_complex * A, gsl_permutation * p, int * signum)
int gsl_linalg_LU_solve (const gsl_matrix * LU, const gsl_permutation * p, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_complex_LU_solve (const gsl_matrix_complex * LU, const gsl_permutation * p, const gsl_vector_complex * b, gsl_vector_complex * x)
int gsl_linalg_LU_svx (const gsl_matrix * LU, const gsl_permutation * p, gsl_vector * x)
int gsl_linalg_complex_LU_svx (const gsl_matrix_complex * LU, const gsl_permutation * p, gsl_vector_complex * x)
int gsl_linalg_LU_refine (const gsl_matrix * A, const gsl_matrix * LU, const gsl_permutation * p, const gsl_vector * b, gsl_vector * x, gsl_vector * residual)
int gsl_linalg_complex_LU_refine (const gsl_matrix_complex * A, const gsl_matrix_complex * LU, const gsl_permutation * p, const gsl_vector_complex * b, gsl_vector_complex * x, gsl_vector_complex * residual)
int gsl_linalg_LU_invert (const gsl_matrix * LU, const gsl_permutation * p, gsl_matrix * inverse)
int gsl_linalg_complex_LU_invert (const gsl_matrix_complex * LU, const gsl_permutation * p, gsl_matrix_complex * inverse)
double gsl_linalg_LU_det (gsl_matrix * LU, int signum)
gsl_complex gsl_linalg_complex_LU_det (gsl_matrix_complex * LU, int signum)
double gsl_linalg_LU_lndet (gsl_matrix * LU)
double gsl_linalg_complex_LU_lndet (gsl_matrix_complex * LU)
int gsl_linalg_LU_sgndet (gsl_matrix * LU, int signum)
gsl_complex gsl_linalg_complex_LU_sgndet (gsl_matrix_complex * LU, int signum)
int gsl_linalg_QR_decomp (gsl_matrix * A, gsl_vector * tau)
int gsl_linalg_QR_solve (const gsl_matrix * QR, const gsl_vector * tau, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_QR_svx (const gsl_matrix * QR, const gsl_vector * tau, gsl_vector * x)
int gsl_linalg_QR_lssolve (const gsl_matrix * QR, const gsl_vector * tau, const gsl_vector * b, gsl_vector * x, gsl_vector * residual)
int gsl_linalg_QR_QTvec (const gsl_matrix * QR, const gsl_vector * tau, gsl_vector * v)
int gsl_linalg_QR_Qvec (const gsl_matrix * QR, const gsl_vector * tau, gsl_vector * v)
int gsl_linalg_QR_QTmat (const gsl_matrix * QR, const gsl_vector * tau, gsl_matrix * A)
int gsl_linalg_QR_Rsolve (const gsl_matrix * QR, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_QR_Rsvx (const gsl_matrix * QR, gsl_vector * x)
int gsl_linalg_QR_unpack (const gsl_matrix * QR, const gsl_vector * tau, gsl_matrix * Q, gsl_matrix * R)
int gsl_linalg_QR_QRsolve (gsl_matrix * Q, gsl_matrix * R, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_QR_update (gsl_matrix * Q, gsl_matrix * R, gsl_vector * w, const gsl_vector * v)
int gsl_linalg_R_solve (const gsl_matrix * R, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_R_svx (const gsl_matrix * R, gsl_vector * x)
# NEXTMAP{"4","OUTPTR"}
int gsl_linalg_QRPT_decomp (gsl_matrix * A, gsl_vector * tau, gsl_permutation * p, int * signum, gsl_vector * norm)
# NEXTMAP{"6","OUTPTR"}
int gsl_linalg_QRPT_decomp2 (const gsl_matrix * A, gsl_matrix * q, gsl_matrix * r, gsl_vector * tau, gsl_permutation * p, int * signum, gsl_vector * norm)
int gsl_linalg_QRPT_solve (const gsl_matrix * QR, const gsl_vector * tau, const gsl_permutation * p, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_QRPT_svx (const gsl_matrix * QR, const gsl_vector * tau, const gsl_permutation * p, gsl_vector * x)
int gsl_linalg_QRPT_QRsolve (const gsl_matrix * Q, const gsl_matrix * R, const gsl_permutation * p, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_QRPT_update (gsl_matrix * Q, gsl_matrix * R, const gsl_permutation * p, gsl_vector * w, const gsl_vector * v)
int gsl_linalg_QRPT_Rsolve (const gsl_matrix * QR, const gsl_permutation * p, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_QRPT_Rsvx (const gsl_matrix * QR, const gsl_permutation * p, gsl_vector * x)
int gsl_linalg_SV_decomp (gsl_matrix * A, gsl_matrix * V, gsl_vector * S, gsl_vector * work)
int gsl_linalg_SV_decomp_mod (gsl_matrix * A, gsl_matrix * X, gsl_matrix * V, gsl_vector * S, gsl_vector * work)
int gsl_linalg_SV_decomp_jacobi (gsl_matrix * A, gsl_matrix * V, gsl_vector * S)
int gsl_linalg_SV_solve (const gsl_matrix * U, const gsl_matrix * V, const gsl_vector * S, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_SV_leverage (const gsl_matrix * U, gsl_vector * h)
int gsl_linalg_cholesky_decomp (gsl_matrix * A)
int gsl_linalg_complex_cholesky_decomp (gsl_matrix_complex * A)
int gsl_linalg_cholesky_solve (const gsl_matrix * cholesky, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_complex_cholesky_solve (const gsl_matrix_complex * cholesky, const gsl_vector_complex * b, gsl_vector_complex * x)
int gsl_linalg_cholesky_svx (const gsl_matrix * cholesky, gsl_vector * x)
int gsl_linalg_complex_cholesky_svx (const gsl_matrix_complex * cholesky, gsl_vector_complex * x)
int gsl_linalg_cholesky_invert (gsl_matrix * cholesky)
int gsl_linalg_complex_cholesky_invert (gsl_matrix_complex * cholesky)
int gsl_linalg_symmtd_decomp (gsl_matrix * A, gsl_vector * tau)
int gsl_linalg_symmtd_unpack (const gsl_matrix * A, const gsl_vector * tau, gsl_matrix * Q, gsl_vector * diag, gsl_vector * subdiag)
int gsl_linalg_symmtd_unpack_T (const gsl_matrix * A, gsl_vector * diag, gsl_vector * subdiag)
int gsl_linalg_hermtd_decomp (gsl_matrix_complex * A, gsl_vector_complex * tau)
int gsl_linalg_hermtd_unpack (const gsl_matrix_complex * A, const gsl_vector_complex * tau, gsl_matrix_complex * U, gsl_vector * diag, gsl_vector * subdiag)
int gsl_linalg_hermtd_unpack_T (const gsl_matrix_complex * A, gsl_vector * diag, gsl_vector * subdiag)
int gsl_linalg_hessenberg_decomp (gsl_matrix * A, gsl_vector * tau)
int gsl_linalg_hessenberg_unpack (gsl_matrix * H, gsl_vector * tau, gsl_matrix * U)
int gsl_linalg_hessenberg_unpack_accum (gsl_matrix * H, gsl_vector * tau, gsl_matrix * V)
int gsl_linalg_hessenberg_set_zero (gsl_matrix * H)
int gsl_linalg_hesstri_decomp (gsl_matrix * A, gsl_matrix * B, gsl_matrix * U, gsl_matrix * V, gsl_vector * work)
int gsl_linalg_bidiag_decomp (gsl_matrix * A, gsl_vector * tau_U, gsl_vector * tau_V)
int gsl_linalg_bidiag_unpack (const gsl_matrix * A, const gsl_vector * tau_U, gsl_matrix * U, const gsl_vector * tau_V, gsl_matrix * V, gsl_vector * diag, gsl_vector * superdiag)
int gsl_linalg_bidiag_unpack2 (gsl_matrix * A, gsl_vector * tau_U, gsl_vector * tau_V, gsl_matrix * V)
int gsl_linalg_bidiag_unpack_B (const gsl_matrix * A, gsl_vector * diag, gsl_vector * superdiag)
double gsl_linalg_householder_transform (gsl_vector * v)
gsl_complex gsl_linalg_complex_householder_transform (gsl_vector_complex * v)
int gsl_linalg_householder_hm (double tau, const gsl_vector * v, gsl_matrix * A)
int gsl_linalg_complex_householder_hm (gsl_complex tau, const gsl_vector_complex * v, gsl_matrix_complex * A)
int gsl_linalg_householder_mh (double tau, const gsl_vector * v, gsl_matrix * A)
int gsl_linalg_complex_householder_mh (gsl_complex tau, const gsl_vector_complex * v, gsl_matrix_complex * A)
int gsl_linalg_householder_hv (double tau, const gsl_vector * v, gsl_vector * w)
int gsl_linalg_complex_householder_hv (gsl_complex tau, const gsl_vector_complex * v, gsl_vector_complex * w)
int gsl_linalg_HH_solve (gsl_matrix * A, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_HH_svx (gsl_matrix * A, gsl_vector * x)
int gsl_linalg_solve_tridiag (const gsl_vector * diag, const gsl_vector * e, const gsl_vector * f, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_solve_symm_tridiag (const gsl_vector * diag, const gsl_vector * e, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_solve_cyc_tridiag (const gsl_vector * diag, const gsl_vector * e, const gsl_vector * f, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_solve_symm_cyc_tridiag (const gsl_vector * diag, const gsl_vector * e, const gsl_vector * b, gsl_vector * x)
int gsl_linalg_balance_matrix (gsl_matrix * A, gsl_vector * D)

# SECTION{"Eigensystems"}
# PACKAGE{"github.com/dtromb/gogsl/eigen", ["gsl/gsl_eigen.h"],["gsl_eigen"]}
# TYPEMAP{"gsl_eigen_sort_t","Sort","C.gsl_eigen_sort_t"}
# GSL_REFTYPE{"gsl_eigen_symm_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_symmv_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_herm_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_hermv_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_nonsymm_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_nonsymmv_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_gensymm_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_gensymmv_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_genherm_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_genhermv_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_gen_workspace",[""]}
# GSL_REFTYPE{"gsl_eigen_genv_workspace",[""]}
gsl_eigen_symm_workspace * gsl_eigen_symm_alloc (const size_t n)
void gsl_eigen_symm_free (gsl_eigen_symm_workspace * w)
int gsl_eigen_symm (gsl_matrix * A, gsl_vector * eval, gsl_eigen_symm_workspace * w)
gsl_eigen_symmv_workspace * gsl_eigen_symmv_alloc (const size_t n)
void gsl_eigen_symmv_free (gsl_eigen_symmv_workspace * w)
int gsl_eigen_symmv (gsl_matrix * A, gsl_vector * eval, gsl_matrix * evec, gsl_eigen_symmv_workspace * w)
gsl_eigen_herm_workspace * gsl_eigen_herm_alloc (const size_t n)
void gsl_eigen_herm_free (gsl_eigen_herm_workspace * w)
int gsl_eigen_herm (gsl_matrix_complex * A, gsl_vector * eval, gsl_eigen_herm_workspace * w)
gsl_eigen_hermv_workspace * gsl_eigen_hermv_alloc (const size_t n)
void gsl_eigen_hermv_free (gsl_eigen_hermv_workspace * w)
int gsl_eigen_hermv (gsl_matrix_complex * A, gsl_vector * eval, gsl_matrix_complex * evec, gsl_eigen_hermv_workspace * w)
gsl_eigen_nonsymm_workspace * gsl_eigen_nonsymm_alloc (const size_t n)
void gsl_eigen_nonsymm_free (gsl_eigen_nonsymm_workspace * w)
void gsl_eigen_nonsymm_params (const int compute_t, const int balance, gsl_eigen_nonsymm_workspace * w)
int gsl_eigen_nonsymm (gsl_matrix * A, gsl_vector_complex * eval, gsl_eigen_nonsymm_workspace * w)
int gsl_eigen_nonsymm_Z (gsl_matrix * A, gsl_vector_complex * eval, gsl_matrix * Z, gsl_eigen_nonsymm_workspace * w)
gsl_eigen_nonsymmv_workspace * gsl_eigen_nonsymmv_alloc (const size_t n)
void gsl_eigen_nonsymmv_free (gsl_eigen_nonsymmv_workspace * w)
void gsl_eigen_nonsymmv_params (const int balance, gsl_eigen_nonsymmv_workspace * w)
int gsl_eigen_nonsymmv (gsl_matrix * A, gsl_vector_complex * eval, gsl_matrix_complex * evec, gsl_eigen_nonsymmv_workspace * w)
int gsl_eigen_nonsymmv_Z (gsl_matrix * A, gsl_vector_complex * eval, gsl_matrix_complex * evec, gsl_matrix * Z, gsl_eigen_nonsymmv_workspace * w)
gsl_eigen_gensymm_workspace * gsl_eigen_gensymm_alloc (const size_t n)
void gsl_eigen_gensymm_free (gsl_eigen_gensymm_workspace * w)
int gsl_eigen_gensymm (gsl_matrix * A, gsl_matrix * B, gsl_vector * eval, gsl_eigen_gensymm_workspace * w)
gsl_eigen_gensymmv_workspace * gsl_eigen_gensymmv_alloc (const size_t n)
void gsl_eigen_gensymmv_free (gsl_eigen_gensymmv_workspace * w)
int gsl_eigen_gensymmv (gsl_matrix * A, gsl_matrix * B, gsl_vector * eval, gsl_matrix * evec, gsl_eigen_gensymmv_workspace * w)
gsl_eigen_genherm_workspace * gsl_eigen_genherm_alloc (const size_t n)
void gsl_eigen_genherm_free (gsl_eigen_genherm_workspace * w)
int gsl_eigen_genherm (gsl_matrix_complex * A, gsl_matrix_complex * B, gsl_vector * eval, gsl_eigen_genherm_workspace * w)
gsl_eigen_genhermv_workspace * gsl_eigen_genhermv_alloc (const size_t n)
void gsl_eigen_genhermv_free (gsl_eigen_genhermv_workspace * w)
int gsl_eigen_genhermv (gsl_matrix_complex * A, gsl_matrix_complex * B, gsl_vector * eval, gsl_matrix_complex * evec, gsl_eigen_genhermv_workspace * w)
gsl_eigen_gen_workspace * gsl_eigen_gen_alloc (const size_t n)
void gsl_eigen_gen_free (gsl_eigen_gen_workspace * w)
void gsl_eigen_gen_params (const int compute_s, const int compute_t, const int balance, gsl_eigen_gen_workspace * w)
int gsl_eigen_gen (gsl_matrix * A, gsl_matrix * B, gsl_vector_complex * alpha, gsl_vector * beta, gsl_eigen_gen_workspace * w)
int gsl_eigen_gen_QZ (gsl_matrix * A, gsl_matrix * B, gsl_vector_complex * alpha, gsl_vector * beta, gsl_matrix * Q, gsl_matrix * Z, gsl_eigen_gen_workspace * w)
gsl_eigen_genv_workspace * gsl_eigen_genv_alloc (const size_t n)
void gsl_eigen_genv_free (gsl_eigen_genv_workspace * w)
int gsl_eigen_genv (gsl_matrix * A, gsl_matrix * B, gsl_vector_complex * alpha, gsl_vector * beta, gsl_matrix_complex * evec, gsl_eigen_genv_workspace * w)
int gsl_eigen_genv_QZ (gsl_matrix * A, gsl_matrix * B, gsl_vector_complex * alpha, gsl_vector * beta, gsl_matrix_complex * evec, gsl_matrix * Q, gsl_matrix * Z, gsl_eigen_genv_workspace * w)
int gsl_eigen_symmv_sort (gsl_vector * eval, gsl_matrix * evec, gsl_eigen_sort_t sort_type)
int gsl_eigen_hermv_sort (gsl_vector * eval, gsl_matrix_complex * evec, gsl_eigen_sort_t sort_type)
int gsl_eigen_nonsymmv_sort (gsl_vector_complex * eval, gsl_matrix_complex * evec, gsl_eigen_sort_t sort_type)
int gsl_eigen_gensymmv_sort (gsl_vector * eval, gsl_matrix * evec, gsl_eigen_sort_t sort_type)
int gsl_eigen_genhermv_sort (gsl_vector * eval, gsl_matrix_complex * evec, gsl_eigen_sort_t sort_type)
int gsl_eigen_genv_sort (gsl_vector_complex * alpha, gsl_vector * beta, gsl_matrix_complex * evec, gsl_eigen_sort_t sort_type)


# SECTION{"Fast Fourier Transforms"}
# PACKAGE{"github.com/dtromb/gogsl/fft", ["gsl/gsl_fft.h","gsl/gsl_fft_complex.h","gsl/gsl_fft_real.h","gsl/gsl_fft_halfcomplex.h"],["gsl_fft"]}
# TYPEMAP{"gsl_fft_direction", "Direction", "C.gsl_fft_direction"}
# GSL_REFTYPE{"gsl_fft_complex_wavetable",[""]}
# GSL_REFTYPE{"gsl_fft_complex_workspace",[""]}
# GSL_REFTYPE{"gsl_fft_real_wavetable",[""]}
# GSL_REFTYPE{"gsl_fft_real_workspace",[""]}
# GSL_REFTYPE{"gsl_fft_halfcomplex_wavetable",[""]}
# GSL_REFTYPE{"gsl_fft_halfcomplex_workspace",[""]}
int gsl_fft_complex_radix2_forward (gsl_complex_packed_array data, size_t stride, size_t n)
int gsl_fft_complex_radix2_transform (gsl_complex_packed_array data, size_t stride, size_t n, gsl_fft_direction sign)
int gsl_fft_complex_radix2_backward (gsl_complex_packed_array data, size_t stride, size_t n)
int gsl_fft_complex_radix2_inverse (gsl_complex_packed_array data, size_t stride, size_t n)
int gsl_fft_complex_radix2_dif_forward (gsl_complex_packed_array data, size_t stride, size_t n)
int gsl_fft_complex_radix2_dif_transform (gsl_complex_packed_array data, size_t stride, size_t n, gsl_fft_direction sign)
int gsl_fft_complex_radix2_dif_backward (gsl_complex_packed_array data, size_t stride, size_t n)
int gsl_fft_complex_radix2_dif_inverse (gsl_complex_packed_array data, size_t stride, size_t n)
gsl_fft_complex_wavetable * gsl_fft_complex_wavetable_alloc (size_t n)
void gsl_fft_complex_wavetable_free (gsl_fft_complex_wavetable * wavetable)
gsl_fft_complex_workspace * gsl_fft_complex_workspace_alloc (size_t n)
void gsl_fft_complex_workspace_free (gsl_fft_complex_workspace * workspace)
int gsl_fft_complex_forward (gsl_complex_packed_array data, size_t stride, size_t n, const gsl_fft_complex_wavetable * wavetable, gsl_fft_complex_workspace * work)
int gsl_fft_complex_transform (gsl_complex_packed_array data, size_t stride, size_t n, const gsl_fft_complex_wavetable * wavetable, gsl_fft_complex_workspace * work, gsl_fft_direction sign)
int gsl_fft_complex_backward (gsl_complex_packed_array data, size_t stride, size_t n, const gsl_fft_complex_wavetable * wavetable, gsl_fft_complex_workspace * work)
int gsl_fft_complex_inverse (gsl_complex_packed_array data, size_t stride, size_t n, const gsl_fft_complex_wavetable * wavetable, gsl_fft_complex_workspace * work)
int gsl_fft_halfcomplex_radix2_inverse (double data[], size_t stride, size_t n)
int gsl_fft_halfcomplex_radix2_backward (double data[], size_t stride, size_t n)
int gsl_fft_halfcomplex_radix2_unpack (const double halfcomplex_coefficient[], gsl_complex_packed_array complex_coefficient, size_t stride, size_t n)
gsl_fft_real_wavetable * gsl_fft_real_wavetable_alloc (size_t n)
gsl_fft_halfcomplex_wavetable * gsl_fft_halfcomplex_wavetable_alloc (size_t n)
void gsl_fft_real_wavetable_free (gsl_fft_real_wavetable * wavetable)
void gsl_fft_halfcomplex_wavetable_free (gsl_fft_halfcomplex_wavetable * wavetable)
gsl_fft_real_workspace * gsl_fft_real_workspace_alloc (size_t n)
void gsl_fft_real_workspace_free (gsl_fft_real_workspace * workspace)
int gsl_fft_real_transform (double data[], size_t stride, size_t n, const gsl_fft_real_wavetable * wavetable, gsl_fft_real_workspace * work)
int gsl_fft_halfcomplex_transform (double data[], size_t stride, size_t n, const gsl_fft_halfcomplex_wavetable * wavetable, gsl_fft_real_workspace * work)
int gsl_fft_real_unpack (const double real_coefficient[], gsl_complex_packed_array complex_coefficient, size_t stride, size_t n)
int gsl_fft_halfcomplex_unpack (const double halfcomplex_coefficient[], gsl_complex_packed_array complex_coefficient, size_t stride, size_t n)

# SECTION{"Numerical Integration"}
# PACKAGE{"github.com/dtromb/gogsl/numint", ["gsl/gsl_integration.h"],["gsl_integration","gsl"]}
# TYPEMAP{"gsl_integration_qawo_enum","GslIntegrationQawoEnum","C.enum_gsl_integration_qawo_enum"}
# GSL_REFTYPE{"gsl_integration_workspace",[]}
# GSL_REFTYPE{"gsl_integration_qaws_table",[]}
# GSL_REFTYPE{"gsl_integration_qawo_table",[]}
# GSL_REFTYPE{"gsl_integration_cquad_workspace",[]}
# GSL_REFTYPE{"gsl_integration_glfixed_table",[]}
# GSL_ENUM{"gsl_integration_qawo_enum"}
# NEXTMAP{"6", "OUTPTR"}
# NEXTMAP{"7", "OUTPTR"}
# NEXTMAP{"8", "OUTPTR"}
int gsl_integration_qng (const gsl_function * f, double a, double b, double epsabs, double epsrel, double * result, double * abserr, size_t * neval)
# NAME{"IntegrationWorkspaceAlloc"}
gsl_integration_workspace * gsl_integration_workspace_alloc (size_t n)
void gsl_integration_workspace_free (gsl_integration_workspace * w)
# NEXTMAP{"9", "OUTPTR"}
# NEXTMAP{"10", "OUTPTR"}
# NEXTTYPE{"7", "IntegrationRule"}
int gsl_integration_qag (const gsl_function * f, double a, double b, double epsabs, double epsrel, size_t limit, int key, gsl_integration_workspace * workspace, double * result, double * abserr)
# NEXTMAP{"8", "OUTPTR"}
# NEXTMAP{"9", "OUTPTR"}
int gsl_integration_qags (const gsl_function * f, double a, double b, double epsabs, double epsrel, size_t limit, gsl_integration_workspace * workspace, double * result, double * abserr)
# NEXTMAP{"2", "SLICEPTR"}
# NEXTMAP{"8", "OUTPTR"}
# NEXTMAP{"9", "OUTPTR"}
int gsl_integration_qagp (const gsl_function * f, double * pts, size_t npts, double epsabs, double epsrel, size_t limit, gsl_integration_workspace * workspace, double * result, double * abserr)
# NEXTMAP{"7", "OUTPTR"}
# NEXTMAP{"8", "OUTPTR"}
int gsl_integration_qagiu (gsl_function * f, double a, double epsabs, double epsrel, size_t limit, gsl_integration_workspace * workspace, double * result, double * abserr)
# NEXTMAP{"7", "OUTPTR"}
# NEXTMAP{"8", "OUTPTR"}
int gsl_integration_qagil (gsl_function * f, double b, double epsabs, double epsrel, size_t limit, gsl_integration_workspace * workspace, double * result, double * abserr)
# NEXTMAP{"9", "OUTPTR"}
# NEXTMAP{"10", "OUTPTR"}
int gsl_integration_qawc (gsl_function * f, double a, double b, double c, double epsabs, double epsrel, size_t limit, gsl_integration_workspace * workspace, double * result, double * abserr)
gsl_integration_qaws_table * gsl_integration_qaws_table_alloc (double alpha, double beta, int mu, int nu)
int gsl_integration_qaws_table_set (gsl_integration_qaws_table * t, double alpha, double beta, int mu, int nu)
void gsl_integration_qaws_table_free (gsl_integration_qaws_table * t)
# NEXTMAP{"9", "OUTPTR"}
# NEXTMAP{"10", "OUTPTR"}
int gsl_integration_qaws (gsl_function * f, const double a, const double b, gsl_integration_qaws_table * t, const double epsabs, const double epsrel, const size_t limit, gsl_integration_workspace * workspace, double * result, double * abserr)
gsl_integration_qawo_table * gsl_integration_qawo_table_alloc (double omega, double L, gsl_integration_qawo_enum sine, size_t n)
int gsl_integration_qawo_table_set (gsl_integration_qawo_table * t, double omega, double L, gsl_integration_qawo_enum sine)
int gsl_integration_qawo_table_set_length (gsl_integration_qawo_table * t, double L)
void gsl_integration_qawo_table_free (gsl_integration_qawo_table * t)
# NEXTMAP{"8", "OUTPTR"}
# NEXTMAP{"9", "OUTPTR"}
int gsl_integration_qawo (gsl_function * f, const double a, const double epsabs, const double epsrel, const size_t limit, gsl_integration_workspace * workspace, gsl_integration_qawo_table * wf, double * result, double * abserr)
# NEXTMAP{"8", "OUTPTR"}
# NEXTMAP{"9", "OUTPTR"}
int gsl_integration_qawf (gsl_function * f, const double a, const double epsabs, const size_t limit, gsl_integration_workspace * workspace, gsl_integration_workspace * cycle_workspace, gsl_integration_qawo_table * wf, double * result, double * abserr)
gsl_integration_cquad_workspace * gsl_integration_cquad_workspace_alloc (size_t n)
void gsl_integration_cquad_workspace_free (gsl_integration_cquad_workspace * w)
# NEXTMAP{"7", "OUTPTR"}
# NEXTMAP{"8", "OUTPTR"}
# NEXTMAP{"9", "OUTPTR"}
int gsl_integration_cquad (const gsl_function * f, double a, double b, double epsabs, double epsrel, gsl_integration_cquad_workspace * workspace, double * result, double * abserr, size_t * nevals)
gsl_integration_glfixed_table * gsl_integration_glfixed_table_alloc (size_t n)
double gsl_integration_glfixed (const gsl_function * f, double a, double b, const gsl_integration_glfixed_table * t)
# NEXTMAP{"4", "SLICEPTR"}
# NEXTMAP{"5", "SLICEPTR"}
int gsl_integration_glfixed_point (double a, double b, size_t i, double * xi, double * wi, const gsl_integration_glfixed_table * t)
void gsl_integration_glfixed_table_free (gsl_integration_glfixed_table * t)

# SECTION{"Random Number Generation"}
# PACKAGE{"github.com/dtromb/gogsl/rng", ["gsl/gsl_rng.h"],["gsl_rng","gsl"]}
# GSL_REFTYPE{"gsl_rng",[]}
# GSL_REFTYPE{"gsl_rng_type",["cPtr uintptr"]}
# NAME{"RngAlloc"}
gsl_rng * gsl_rng_alloc (const gsl_rng_type * T)
void gsl_rng_set (const gsl_rng * r, unsigned long s)
void gsl_rng_free (gsl_rng * r)
unsigned long gsl_rng_get (const gsl_rng * r)
double gsl_rng_uniform (const gsl_rng * r)
double gsl_rng_uniform_pos (const gsl_rng * r)
unsigned long gsl_rng_uniform_int (const gsl_rng * r, unsigned long n)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_rng_name (const gsl_rng * r)
unsigned long gsl_rng_max (const gsl_rng * r)
unsigned long gsl_rng_min (const gsl_rng * r)
# NEXTTYPE{"0","*RngState"}
void * gsl_rng_state (const gsl_rng * r)
size_t gsl_rng_size (const gsl_rng * r)
const gsl_rng_type * gsl_rng_env_setup ()
# NEXTTYPE{"1","RngState"}
# NEXTTYPE{"2","RngState"}
int gsl_rng_memcpy (gsl_rng * dest, const gsl_rng * src)
gsl_rng * gsl_rng_clone (const gsl_rng * r)
int gsl_rng_fwrite (FILE * stream, const gsl_rng * r)
int gsl_rng_fread (FILE * stream, gsl_rng * r)

# SECTION{"Quasi-Random Sequences"}
# PACKAGE{"github.com/dtromb/gogsl/qrng", ["gsl/gsl_qrng.h"],["gsl_qrng"]}
# GSL_REFTYPE{"gsl_qrng",[]}
# GSL_REFTYPE{"gsl_qrng_type",["cPtr uintptr"]}
# NAME{"QrngAlloc"}
gsl_qrng * gsl_qrng_alloc (const gsl_qrng_type * T, unsigned int d)
void gsl_qrng_free (gsl_qrng * q)
void gsl_qrng_init (gsl_qrng * q)
int gsl_qrng_get (const gsl_qrng * q, double x[])
# NEXTTYPE{"0","string"}
# NEXTMAP{"0","STRING"}
const char * gsl_qrng_name (const gsl_qrng * q)
size_t gsl_qrng_size (const gsl_qrng * q)
# NEXTTYPE{"0","*QrngState"}
void * gsl_qrng_state (const gsl_qrng * q)
int gsl_qrng_memcpy (gsl_qrng * dest, const gsl_qrng * src)
gsl_qrng * gsl_qrng_clone (const gsl_qrng * q)

# SECTION{"Random Number Distributions"}
# PACKAGE{"github.com/dtromb/gogsl/randist", ["gsl/gsl_randist.h","gsl/gsl_cdf.h"],["gsl_ran","gsl"]}
# GSL_REFTYPE{"gsl_ran_discrete_t",[]}
double gsl_ran_gaussian (const gsl_rng * r, double sigma)
double gsl_ran_gaussian_pdf (double x, double sigma)
double gsl_ran_gaussian_ziggurat (const gsl_rng * r, double sigma)
double gsl_ran_gaussian_ratio_method (const gsl_rng * r, double sigma)
double gsl_ran_ugaussian (const gsl_rng * r)
double gsl_ran_ugaussian_pdf (double x)
double gsl_ran_ugaussian_ratio_method (const gsl_rng * r)
double gsl_cdf_gaussian_P (double x, double sigma)
double gsl_cdf_gaussian_Q (double x, double sigma)
double gsl_cdf_gaussian_Pinv (double P, double sigma)
double gsl_cdf_gaussian_Qinv (double Q, double sigma)
double gsl_cdf_ugaussian_P (double x)
double gsl_cdf_ugaussian_Q (double x)
double gsl_cdf_ugaussian_Pinv (double P)
double gsl_cdf_ugaussian_Qinv (double Q)
double gsl_ran_gaussian_tail (const gsl_rng * r, double a, double sigma)
double gsl_ran_gaussian_tail_pdf (double x, double a, double sigma)
double gsl_ran_ugaussian_tail (const gsl_rng * r, double a)
double gsl_ran_ugaussian_tail_pdf (double x, double a)
# NEXTMAP{"5","OUTPTR"}
# NEXTMAP{"6","OUTPTR"}
void gsl_ran_bivariate_gaussian (const gsl_rng * r, double sigma_x, double sigma_y, double rho, double * x, double * y)
double gsl_ran_bivariate_gaussian_pdf (double x, double y, double sigma_x, double sigma_y, double rho)
double gsl_ran_exponential (const gsl_rng * r, double mu)
double gsl_ran_exponential_pdf (double x, double mu)
double gsl_cdf_exponential_P (double x, double mu)
double gsl_cdf_exponential_Q (double x, double mu)
double gsl_cdf_exponential_Pinv (double P, double mu)
double gsl_cdf_exponential_Qinv (double Q, double mu)
double gsl_ran_laplace (const gsl_rng * r, double a)
double gsl_ran_laplace_pdf (double x, double a)
double gsl_cdf_laplace_P (double x, double a)
double gsl_cdf_laplace_Q (double x, double a)
double gsl_cdf_laplace_Pinv (double P, double a)
double gsl_cdf_laplace_Qinv (double Q, double a)
double gsl_ran_exppow (const gsl_rng * r, double a, double b)
double gsl_ran_exppow_pdf (double x, double a, double b)
double gsl_cdf_exppow_P (double x, double a, double b)
double gsl_cdf_exppow_Q (double x, double a, double b)
double gsl_ran_cauchy (const gsl_rng * r, double a)
double gsl_ran_cauchy_pdf (double x, double a)
double gsl_cdf_cauchy_P (double x, double a)
double gsl_cdf_cauchy_Q (double x, double a)
double gsl_cdf_cauchy_Pinv (double P, double a)
double gsl_cdf_cauchy_Qinv (double Q, double a)
double gsl_ran_rayleigh (const gsl_rng * r, double sigma)
double gsl_ran_rayleigh_pdf (double x, double sigma)
double gsl_cdf_rayleigh_P (double x, double sigma)
double gsl_cdf_rayleigh_Q (double x, double sigma)
double gsl_cdf_rayleigh_Pinv (double P, double sigma)
double gsl_cdf_rayleigh_Qinv (double Q, double sigma)
double gsl_ran_rayleigh_tail (const gsl_rng * r, double a, double sigma)
double gsl_ran_rayleigh_tail_pdf (double x, double a, double sigma)
double gsl_ran_landau (const gsl_rng * r)
double gsl_ran_landau_pdf (double x)
double gsl_ran_levy (const gsl_rng * r, double c, double alpha)
double gsl_ran_levy_skew (const gsl_rng * r, double c, double alpha, double beta)
double gsl_ran_gamma (const gsl_rng * r, double a, double b)
double gsl_ran_gamma_knuth (const gsl_rng * r, double a, double b)
double gsl_ran_gamma_pdf (double x, double a, double b)
double gsl_cdf_gamma_P (double x, double a, double b)
double gsl_cdf_gamma_Q (double x, double a, double b)
double gsl_cdf_gamma_Pinv (double P, double a, double b)
double gsl_cdf_gamma_Qinv (double Q, double a, double b)
double gsl_ran_flat (const gsl_rng * r, double a, double b)
double gsl_ran_flat_pdf (double x, double a, double b)
double gsl_cdf_flat_P (double x, double a, double b)
double gsl_cdf_flat_Q (double x, double a, double b)
double gsl_cdf_flat_Pinv (double P, double a, double b)
double gsl_cdf_flat_Qinv (double Q, double a, double b)
double gsl_ran_lognormal (const gsl_rng * r, double zeta, double sigma)
double gsl_ran_lognormal_pdf (double x, double zeta, double sigma)
double gsl_cdf_lognormal_P (double x, double zeta, double sigma)
double gsl_cdf_lognormal_Q (double x, double zeta, double sigma)
double gsl_cdf_lognormal_Pinv (double P, double zeta, double sigma)
double gsl_cdf_lognormal_Qinv (double Q, double zeta, double sigma)
double gsl_ran_chisq (const gsl_rng * r, double nu)
double gsl_ran_chisq_pdf (double x, double nu)
double gsl_cdf_chisq_P (double x, double nu)
double gsl_cdf_chisq_Q (double x, double nu)
double gsl_cdf_chisq_Pinv (double P, double nu)
double gsl_cdf_chisq_Qinv (double Q, double nu)
double gsl_ran_fdist (const gsl_rng * r, double nu1, double nu2)
double gsl_ran_fdist_pdf (double x, double nu1, double nu2)
double gsl_cdf_fdist_P (double x, double nu1, double nu2)
double gsl_cdf_fdist_Q (double x, double nu1, double nu2)
double gsl_cdf_fdist_Pinv (double P, double nu1, double nu2)
double gsl_cdf_fdist_Qinv (double Q, double nu1, double nu2)
double gsl_ran_tdist (const gsl_rng * r, double nu)
double gsl_ran_tdist_pdf (double x, double nu)
double gsl_cdf_tdist_P (double x, double nu)
double gsl_cdf_tdist_Q (double x, double nu)
double gsl_cdf_tdist_Pinv (double P, double nu)
double gsl_cdf_tdist_Qinv (double Q, double nu)
double gsl_ran_beta (const gsl_rng * r, double a, double b)
double gsl_ran_beta_pdf (double x, double a, double b)
double gsl_cdf_beta_P (double x, double a, double b)
double gsl_cdf_beta_Q (double x, double a, double b)
double gsl_cdf_beta_Pinv (double P, double a, double b)
double gsl_cdf_beta_Qinv (double Q, double a, double b)
double gsl_ran_logistic (const gsl_rng * r, double a)
double gsl_ran_logistic_pdf (double x, double a)
double gsl_cdf_logistic_P (double x, double a)
double gsl_cdf_logistic_Q (double x, double a)
double gsl_cdf_logistic_Pinv (double P, double a)
double gsl_cdf_logistic_Qinv (double Q, double a)
double gsl_ran_pareto (const gsl_rng * r, double a, double b)
double gsl_ran_pareto_pdf (double x, double a, double b)
double gsl_cdf_pareto_P (double x, double a, double b)
double gsl_cdf_pareto_Q (double x, double a, double b)
double gsl_cdf_pareto_Pinv (double P, double a, double b)
double gsl_cdf_pareto_Qinv (double Q, double a, double b)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_ran_dir_2d (const gsl_rng * r, double * x, double * y)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_ran_dir_2d_trig_method (const gsl_rng * r, double * x, double * y)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
# NEXTMAP{"4","OUTPTR"}
void gsl_ran_dir_3d (const gsl_rng * r, double * x, double * y, double * z)
# NEXTMAP{"3","OUTPTR"}
void gsl_ran_dir_nd (const gsl_rng * r, size_t n, double * x)
double gsl_ran_weibull (const gsl_rng * r, double a, double b)
double gsl_ran_weibull_pdf (double x, double a, double b)
double gsl_cdf_weibull_P (double x, double a, double b)
double gsl_cdf_weibull_Q (double x, double a, double b)
double gsl_cdf_weibull_Pinv (double P, double a, double b)
double gsl_cdf_weibull_Qinv (double Q, double a, double b)
double gsl_ran_gumbel1 (const gsl_rng * r, double a, double b)
double gsl_ran_gumbel1_pdf (double x, double a, double b)
double gsl_cdf_gumbel1_P (double x, double a, double b)
double gsl_cdf_gumbel1_Q (double x, double a, double b)
double gsl_cdf_gumbel1_Pinv (double P, double a, double b)
double gsl_cdf_gumbel1_Qinv (double Q, double a, double b)
double gsl_ran_gumbel2 (const gsl_rng * r, double a, double b)
double gsl_ran_gumbel2_pdf (double x, double a, double b)
double gsl_cdf_gumbel2_P (double x, double a, double b)
double gsl_cdf_gumbel2_Q (double x, double a, double b)
double gsl_cdf_gumbel2_Pinv (double P, double a, double b)
double gsl_cdf_gumbel2_Qinv (double Q, double a, double b)
void gsl_ran_dirichlet (const gsl_rng * r, size_t K, const double alpha[], double theta[])
double gsl_ran_dirichlet_pdf (size_t K, const double alpha[], const double theta[])
double gsl_ran_dirichlet_lnpdf (size_t K, const double alpha[], const double theta[]) 
# NEXTMAP{"2","SLICEPTR"}
gsl_ran_discrete_t * gsl_ran_discrete_preproc (size_t K, const double * P)
size_t gsl_ran_discrete (const gsl_rng * r, const gsl_ran_discrete_t * g)
double gsl_ran_discrete_pdf (size_t k, const gsl_ran_discrete_t * g)
void gsl_ran_discrete_free (gsl_ran_discrete_t * g)
unsigned int gsl_ran_poisson (const gsl_rng * r, double mu)
double gsl_ran_poisson_pdf (unsigned int k, double mu)
double gsl_cdf_poisson_P (unsigned int k, double mu)
double gsl_cdf_poisson_Q (unsigned int k, double mu)
unsigned int gsl_ran_bernoulli (const gsl_rng * r, double p)
double gsl_ran_bernoulli_pdf (unsigned int k, double p)
unsigned int gsl_ran_binomial (const gsl_rng * r, double p, unsigned int n)
double gsl_ran_binomial_pdf (unsigned int k, double p, unsigned int n)
double gsl_cdf_binomial_P (unsigned int k, double p, unsigned int n)
double gsl_cdf_binomial_Q (unsigned int k, double p, unsigned int n)
void gsl_ran_multinomial (const gsl_rng * r, size_t K, unsigned int N, const double p[], unsigned int x[])
double gsl_ran_multinomial_pdf (size_t K, const double p[], const unsigned int n[])
double gsl_ran_multinomial_lnpdf (size_t K, const double p[], const unsigned int n[]) 
unsigned int gsl_ran_negative_binomial (const gsl_rng * r, double p, double n)
double gsl_ran_negative_binomial_pdf (unsigned int k, double p, double n)
double gsl_cdf_negative_binomial_P (unsigned int k, double p, double n)
double gsl_cdf_negative_binomial_Q (unsigned int k, double p, double n)
unsigned int gsl_ran_pascal (const gsl_rng * r, double p, unsigned int n)
double gsl_ran_pascal_pdf (unsigned int k, double p, unsigned int n)
double gsl_cdf_pascal_P (unsigned int k, double p, unsigned int n)
double gsl_cdf_pascal_Q (unsigned int k, double p, unsigned int n)
unsigned int gsl_ran_geometric (const gsl_rng * r, double p)
double gsl_ran_geometric_pdf (unsigned int k, double p)
double gsl_cdf_geometric_P (unsigned int k, double p)
double gsl_cdf_geometric_Q (unsigned int k, double p)
unsigned int gsl_ran_hypergeometric (const gsl_rng * r, unsigned int n1, unsigned int n2, unsigned int t)
double gsl_ran_hypergeometric_pdf (unsigned int k, unsigned int n1, unsigned int n2, unsigned int t)
double gsl_cdf_hypergeometric_P (unsigned int k, unsigned int n1, unsigned int n2, unsigned int t)
double gsl_cdf_hypergeometric_Q (unsigned int k, unsigned int n1, unsigned int n2, unsigned int t)
unsigned int gsl_ran_logarithmic (const gsl_rng * r, double p)
double gsl_ran_logarithmic_pdf (unsigned int k, double p)

# SECTION{"Statistics"}
# PACKAGE{"github.com/dtromb/gogsl/stats", ["gsl/gsl_statistics.h","gsl/gsl_complex.h"],["gsl_stats"]}
double gsl_stats_mean (const double data[], size_t stride, size_t n)
double gsl_stats_variance (const double data[], size_t stride, size_t n)
double gsl_stats_variance_m (const double data[], size_t stride, size_t n, double mean)
double gsl_stats_sd (const double data[], size_t stride, size_t n)
double gsl_stats_sd_m (const double data[], size_t stride, size_t n, double mean)
double gsl_stats_tss (const double data[], size_t stride, size_t n)
double gsl_stats_tss_m (const double data[], size_t stride, size_t n, double mean)
double gsl_stats_variance_with_fixed_mean (const double data[], size_t stride, size_t n, double mean)
double gsl_stats_sd_with_fixed_mean (const double data[], size_t stride, size_t n, double mean)
double gsl_stats_absdev (const double data[], size_t stride, size_t n)
double gsl_stats_absdev_m (const double data[], size_t stride, size_t n, double mean)
double gsl_stats_skew (const double data[], size_t stride, size_t n)
double gsl_stats_skew_m_sd (const double data[], size_t stride, size_t n, double mean, double sd)
double gsl_stats_kurtosis (const double data[], size_t stride, size_t n)
double gsl_stats_kurtosis_m_sd (const double data[], size_t stride, size_t n, double mean, double sd)
double gsl_stats_lag1_autocorrelation (const double data[], const size_t stride, const size_t n)
double gsl_stats_lag1_autocorrelation_m (const double data[], const size_t stride, const size_t n, const double mean)
double gsl_stats_covariance (const double data1[], const size_t stride1, const double data2[], const size_t stride2, const size_t n)
double gsl_stats_covariance_m (const double data1[], const size_t stride1, const double data2[], const size_t stride2, const size_t n, const double mean1, const double mean2)
double gsl_stats_correlation (const double data1[], const size_t stride1, const double data2[], const size_t stride2, const size_t n)
double gsl_stats_spearman (const double data1[], const size_t stride1, const double data2[], const size_t stride2, const size_t n, double work[])
double gsl_stats_wmean (const double w[], size_t wstride, const double data[], size_t stride, size_t n)
double gsl_stats_wvariance (const double w[], size_t wstride, const double data[], size_t stride, size_t n)
double gsl_stats_wvariance_m (const double w[], size_t wstride, const double data[], size_t stride, size_t n, double wmean)
double gsl_stats_wsd (const double w[], size_t wstride, const double data[], size_t stride, size_t n)
double gsl_stats_wsd_m (const double w[], size_t wstride, const double data[], size_t stride, size_t n, double wmean)
double gsl_stats_wvariance_with_fixed_mean (const double w[], size_t wstride, const double data[], size_t stride, size_t n, const double mean)
double gsl_stats_wsd_with_fixed_mean (const double w[], size_t wstride, const double data[], size_t stride, size_t n, const double mean)
double gsl_stats_wtss (const double w[], const size_t wstride, const double data[], size_t stride, size_t n)
double gsl_stats_wtss_m (const double w[], const size_t wstride, const double data[], size_t stride, size_t n, double wmean)
double gsl_stats_wabsdev (const double w[], size_t wstride, const double data[], size_t stride, size_t n)
double gsl_stats_wabsdev_m (const double w[], size_t wstride, const double data[], size_t stride, size_t n, double wmean)
double gsl_stats_wskew (const double w[], size_t wstride, const double data[], size_t stride, size_t n)
double gsl_stats_wskew_m_sd (const double w[], size_t wstride, const double data[], size_t stride, size_t n, double wmean, double wsd)
double gsl_stats_wkurtosis (const double w[], size_t wstride, const double data[], size_t stride, size_t n)
double gsl_stats_wkurtosis_m_sd (const double w[], size_t wstride, const double data[], size_t stride, size_t n, double wmean, double wsd)
float gsl_stats_float_wmean (const float w[], size_t wstride, const float data[], size_t stride, size_t n)
float gsl_stats_float_wvariance (const float w[], size_t wstride, const float data[], size_t stride, size_t n)
float gsl_stats_float_wvariance_m (const float w[], size_t wstride, const float data[], size_t stride, size_t n, double wmean)
float gsl_stats_float_wsd (const float w[], size_t wstride, const float data[], size_t stride, size_t n)
float gsl_stats_float_wsd_m (const float w[], size_t wstride, const float data[], size_t stride, size_t n, double wmean)
float gsl_stats_float_wvariance_with_fixed_mean (const float w[], size_t wstride, const float data[], size_t stride, size_t n, const double mean)
float gsl_stats_float_wsd_with_fixed_mean (const float w[], size_t wstride, const float data[], size_t stride, size_t n, const double mean)
float gsl_stats_float_wtss (const float w[], const size_t wstride, const float data[], size_t stride, size_t n)
float gsl_stats_float_wtss_m (const float w[], const size_t wstride, const float data[], size_t stride, size_t n, double wmean)
float gsl_stats_float_wabsdev (const float w[], size_t wstride, const float data[], size_t stride, size_t n)
float gsl_stats_float_wabsdev_m (const float w[], size_t wstride, const float data[], size_t stride, size_t n, double wmean)
float gsl_stats_float_wskew (const float w[], size_t wstride, const float data[], size_t stride, size_t n)
float gsl_stats_float_wskew_m_sd (const float w[], size_t wstride, const float data[], size_t stride, size_t n, double wmean, double wsd)
float gsl_stats_float_wkurtosis (const float w[], size_t wstride, const float data[], size_t stride, size_t n)
float gsl_stats_float_wkurtosis_m_sd (const float w[], size_t wstride, const float data[], size_t stride, size_t n, double wmean, double wsd)
double gsl_stats_max (const double data[], size_t stride, size_t n)
double gsl_stats_min (const double data[], size_t stride, size_t n)
# NEXTMAP{"1","OUTPTR"}
# NEXTMAP{"2","OUTPTR"}
void gsl_stats_minmax (double * min, double * max, const double data[], size_t stride, size_t n)
size_t gsl_stats_max_index (const double data[], size_t stride, size_t n)
size_t gsl_stats_min_index (const double data[], size_t stride, size_t n)
# NEXTMAP{"1","OUTPTR"}
# NEXTMAP{"2","OUTPTR"}
void gsl_stats_minmax_index (size_t * min_index, size_t * max_index, const double data[], size_t stride, size_t n)
double gsl_stats_median_from_sorted_data (const double sorted_data[], size_t stride, size_t n)
double gsl_stats_quantile_from_sorted_data (const double sorted_data[], size_t stride, size_t n, double f)
# GSL_PREFIX_TEMPLATE_START{[],["complex","complex_float"]}
double gsl_stats_$_mean (const @ data[], size_t stride, size_t n)
double gsl_stats_$_variance (const @ data[], size_t stride, size_t n)
double gsl_stats_$_variance_m (const @ data[], size_t stride, size_t n, double mean)
double gsl_stats_$_sd (const @ data[], size_t stride, size_t n)
double gsl_stats_$_sd_m (const @ data[], size_t stride, size_t n, double mean)
double gsl_stats_$_tss (const @ data[], size_t stride, size_t n)
double gsl_stats_$_tss_m (const @ data[], size_t stride, size_t n, double mean)
double gsl_stats_$_variance_with_fixed_mean (const @ data[], size_t stride, size_t n, double mean)
double gsl_stats_$_sd_with_fixed_mean (const @ data[], size_t stride, size_t n, double mean)
double gsl_stats_$_absdev (const @ data[], size_t stride, size_t n)
double gsl_stats_$_absdev_m (const @ data[], size_t stride, size_t n, double mean)
double gsl_stats_$_skew (const @ data[], size_t stride, size_t n)
double gsl_stats_$_skew_m_sd (const @ data[], size_t stride, size_t n, double mean, double sd)
double gsl_stats_$_kurtosis (const @ data[], size_t stride, size_t n)
double gsl_stats_$_kurtosis_m_sd (const @ data[], size_t stride, size_t n, double mean, double sd)
double gsl_stats_$_lag1_autocorrelation (const @ data[], const size_t stride, const size_t n)
double gsl_stats_$_lag1_autocorrelation_m (const @ data[], const size_t stride, const size_t n, const double mean)
double gsl_stats_$_covariance (const @ data1[], const size_t stride1, const @ data2[], const size_t stride2, const size_t n)
double gsl_stats_$_covariance_m (const @ data1[], const size_t stride1, const @ data2[], const size_t stride2, const size_t n, const double mean1, const double mean2)
double gsl_stats_$_correlation (const @ data1[], const size_t stride1, const @ data2[], const size_t stride2, const size_t n)
double gsl_stats_$_spearman (const @ data1[], const size_t stride1, const @ data2[], const size_t stride2, const size_t n, double work[])
double gsl_stats_$_max (const @ data[], size_t stride, size_t n)
double gsl_stats_$_min (const @ data[], size_t stride, size_t n)
# NEXTMAP{"1","OUTPTR"}
# NEXTMAP{"2","OUTPTR"}
void gsl_stats_$_minmax (@ * min, @ * max, const @ data[], size_t stride, size_t n)
size_t gsl_stats_$_max_index (const @ data[], size_t stride, size_t n)
size_t gsl_stats_$_min_index (const @ data[], size_t stride, size_t n)
# NEXTMAP{"1","OUTPTR"}
# NEXTMAP{"2","OUTPTR"}
void gsl_stats_$_minmax_index (size_t * min_index, size_t * max_index, const @ data[], size_t stride, size_t n)
double gsl_stats_$_median_from_sorted_data (const @ sorted_data[], size_t stride, size_t n)
double gsl_stats_$_quantile_from_sorted_data (const @ sorted_data[], size_t stride, size_t n, double f)
# GSL_PREFIX_TEMPLATE_END{}

# SECTION{"Histograms"}
# PACKAGE{"github.com/dtromb/gogsl/histogram", ["gsl/gsl_histogram.h","gsl/gsl_histogram2d.h"],["gsl_histogram","gsl"]}
# GSL_REFTYPE{"gsl_histogram",[]}
# GSL_REFTYPE{"gsl_histogram_pdf",[]}
# GSL_REFTYPE{"gsl_histogram2d",[]}
# GSL_REFTYPE{"gsl_histogram2d_pdf",[]}
# NAME{"HistogramAlloc"}
gsl_histogram * gsl_histogram_alloc (size_t n)
int gsl_histogram_set_ranges (gsl_histogram * h, const double r[], size_t size)
int gsl_histogram_set_ranges_uniform (gsl_histogram * h, double xmin, double xmax)
void gsl_histogram_free (gsl_histogram * h)
int gsl_histogram_memcpy (gsl_histogram * dest, const gsl_histogram * src)
gsl_histogram * gsl_histogram_clone (const gsl_histogram * src)
int gsl_histogram_increment (gsl_histogram * h, double x)
int gsl_histogram_accumulate (gsl_histogram * h, double x, double weight)
double gsl_histogram_get (const gsl_histogram * h, size_t i)
# NEXTMAP{"3","OUTPTR"}
# NEXTMAP{"4","OUTPTR"}
int gsl_histogram_get_range (const gsl_histogram * h, size_t i, double * lower, double * upper)
double gsl_histogram_max (const gsl_histogram * h)
double gsl_histogram_min (const gsl_histogram * h)
size_t gsl_histogram_bins (const gsl_histogram * h)
void gsl_histogram_reset (gsl_histogram * h)
# NEXTMAP{"3","OUTPTR"}
int gsl_histogram_find (const gsl_histogram * h, double x, size_t * i)
double gsl_histogram_max_val (const gsl_histogram * h)
size_t gsl_histogram_max_bin (const gsl_histogram * h)
double gsl_histogram_min_val (const gsl_histogram * h)
size_t gsl_histogram_min_bin (const gsl_histogram * h)
double gsl_histogram_mean (const gsl_histogram * h)
double gsl_histogram_sigma (const gsl_histogram * h)
double gsl_histogram_sum (const gsl_histogram * h)
int gsl_histogram_equal_bins_p (const gsl_histogram * h1, const gsl_histogram * h2)
int gsl_histogram_add (gsl_histogram * h1, const gsl_histogram * h2)
int gsl_histogram_sub (gsl_histogram * h1, const gsl_histogram * h2)
int gsl_histogram_mul (gsl_histogram * h1, const gsl_histogram * h2)
int gsl_histogram_div (gsl_histogram * h1, const gsl_histogram * h2)
int gsl_histogram_scale (gsl_histogram * h, double scale)
int gsl_histogram_shift (gsl_histogram * h, double offset)
int gsl_histogram_fwrite (FILE * stream, const gsl_histogram * h)
int gsl_histogram_fread (FILE * stream, gsl_histogram * h)
# NEXTMAP{"3","STRING"}
# NEXTMAP{"4","STRING"}
int gsl_histogram_fprintf (FILE * stream, const gsl_histogram * h, const char * range_format, const char * bin_format)
int gsl_histogram_fscanf (FILE * stream, gsl_histogram * h)
gsl_histogram_pdf * gsl_histogram_pdf_alloc (size_t n)
int gsl_histogram_pdf_init (gsl_histogram_pdf * p, const gsl_histogram * h)
void gsl_histogram_pdf_free (gsl_histogram_pdf * p)
double gsl_histogram_pdf_sample (const gsl_histogram_pdf * p, double r)
gsl_histogram2d * gsl_histogram2d_alloc (size_t nx, size_t ny)
int gsl_histogram2d_set_ranges (gsl_histogram2d * h, const double xrange[], size_t xsize, const double yrange[], size_t ysize)
int gsl_histogram2d_set_ranges_uniform (gsl_histogram2d * h, double xmin, double xmax, double ymin, double ymax)
void gsl_histogram2d_free (gsl_histogram2d * h)
int gsl_histogram2d_memcpy (gsl_histogram2d * dest, const gsl_histogram2d * src)
gsl_histogram2d * gsl_histogram2d_clone (const gsl_histogram2d * src)
int gsl_histogram2d_increment (gsl_histogram2d * h, double x, double y)
int gsl_histogram2d_accumulate (gsl_histogram2d * h, double x, double y, double weight)
double gsl_histogram2d_get (const gsl_histogram2d * h, size_t i, size_t j)
# NEXTMAP{"3","OUTPTR"}
# NEXTMAP{"4","OUTPTR"}
int gsl_histogram2d_get_xrange (const gsl_histogram2d * h, size_t i, double * xlower, double * xupper)
# NEXTMAP{"3","OUTPTR"}
# NEXTMAP{"4","OUTPTR"}
int gsl_histogram2d_get_yrange (const gsl_histogram2d * h, size_t j, double * ylower, double * yupper)
double gsl_histogram2d_xmax (const gsl_histogram2d * h)
double gsl_histogram2d_xmin (const gsl_histogram2d * h)
size_t gsl_histogram2d_nx (const gsl_histogram2d * h)
double gsl_histogram2d_ymax (const gsl_histogram2d * h)
double gsl_histogram2d_ymin (const gsl_histogram2d * h)
size_t gsl_histogram2d_ny (const gsl_histogram2d * h)
void gsl_histogram2d_reset (gsl_histogram2d * h)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_histogram2d_find (const gsl_histogram2d * h, double x, double y, size_t * i, size_t * j)
double gsl_histogram2d_max_val (const gsl_histogram2d * h)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_histogram2d_max_bin (const gsl_histogram2d * h, size_t * i, size_t * j)
double gsl_histogram2d_min_val (const gsl_histogram2d * h)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_histogram2d_min_bin (const gsl_histogram2d * h, size_t * i, size_t * j)
double gsl_histogram2d_xmean (const gsl_histogram2d * h)
double gsl_histogram2d_ymean (const gsl_histogram2d * h)
double gsl_histogram2d_xsigma (const gsl_histogram2d * h)
double gsl_histogram2d_ysigma (const gsl_histogram2d * h)
double gsl_histogram2d_cov (const gsl_histogram2d * h)
double gsl_histogram2d_sum (const gsl_histogram2d * h)
int gsl_histogram2d_equal_bins_p (const gsl_histogram2d * h1, const gsl_histogram2d * h2)
int gsl_histogram2d_add (gsl_histogram2d * h1, const gsl_histogram2d * h2)
int gsl_histogram2d_sub (gsl_histogram2d * h1, const gsl_histogram2d * h2)
int gsl_histogram2d_mul (gsl_histogram2d * h1, const gsl_histogram2d * h2)
int gsl_histogram2d_div (gsl_histogram2d * h1, const gsl_histogram2d * h2)
int gsl_histogram2d_scale (gsl_histogram2d * h, double scale)
int gsl_histogram2d_shift (gsl_histogram2d * h, double offset)
int gsl_histogram2d_fwrite (FILE * stream, const gsl_histogram2d * h)
int gsl_histogram2d_fread (FILE * stream, gsl_histogram2d * h)
# NEXTMAP{"3","STRING"}
# NEXTMAP{"4","STRING"}
int gsl_histogram2d_fprintf (FILE * stream, const gsl_histogram2d * h, const char * range_format, const char * bin_format)
int gsl_histogram2d_fscanf (FILE * stream, gsl_histogram2d * h)
gsl_histogram2d_pdf * gsl_histogram2d_pdf_alloc (size_t nx, size_t ny)
int gsl_histogram2d_pdf_init (gsl_histogram2d_pdf * p, const gsl_histogram2d * h)
void gsl_histogram2d_pdf_free (gsl_histogram2d_pdf * p)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_histogram2d_pdf_sample (const gsl_histogram2d_pdf * p, double r1, double r2, double * x, double * y)

# SECTION{"Monte Carlo Integration"}
# PACKAGE{"github.com/dtromb/gogsl/monte", ["gsl/gsl_monte_plain.h","gsl/gsl_monte_miser.h","gsl/gsl_monte_vegas.h"],["gsl_monte"]}
# GSL_REFTYPE{"gsl_monte_plain_state",[]}
# GSL_REFTYPE{"gsl_monte_miser_state",[]}
# GSL_REFTYPE{"gsl_monte_miser_params",[]}
# GSL_REFTYPE{"gsl_monte_vegas_state",[]}
# GSL_REFTYPE{"gsl_monte_vegas_params",[]}
gsl_monte_plain_state * gsl_monte_plain_alloc (size_t dim)
int gsl_monte_plain_init (gsl_monte_plain_state* s)
# NEXTMAP{"8","OUTPTR"}
# NEXTMAP{"9","OUTPTR"}
int gsl_monte_plain_integrate (gsl_monte_function * f, const double xl[], const double xu[], size_t dim, size_t calls, gsl_rng * r, gsl_monte_plain_state * s, double * result, double * abserr)
void gsl_monte_plain_free (gsl_monte_plain_state * s)
gsl_monte_miser_state * gsl_monte_miser_alloc (size_t dim)
int gsl_monte_miser_init (gsl_monte_miser_state* s)
# NEXTMAP{"8","OUTPTR"}
# NEXTMAP{"9","OUTPTR"}
int gsl_monte_miser_integrate (gsl_monte_function * f, const double xl[], const double xu[], size_t dim, size_t calls, gsl_rng * r, gsl_monte_miser_state * s, double * result, double * abserr)
void gsl_monte_miser_free (gsl_monte_miser_state * s)
void gsl_monte_miser_params_get (const gsl_monte_miser_state * s, gsl_monte_miser_params * params)
void gsl_monte_miser_params_set (gsl_monte_miser_state * s, const gsl_monte_miser_params * params) 
gsl_monte_vegas_state * gsl_monte_vegas_alloc (size_t dim)
int gsl_monte_vegas_init (gsl_monte_vegas_state* s)
# NEXTMAP{"8","OUTPTR"}
# NEXTMAP{"9","OUTPTR"}
int gsl_monte_vegas_integrate (gsl_monte_function * f, double xl[], double xu[], size_t dim, size_t calls, gsl_rng * r, gsl_monte_vegas_state * s, double * result, double * abserr)
void gsl_monte_vegas_free (gsl_monte_vegas_state * s)
double gsl_monte_vegas_chisq (const gsl_monte_vegas_state * s)
# NEXTMAP{"2","OUTPTR"}
# NEXTMAP{"3","OUTPTR"}
void gsl_monte_vegas_runval (const gsl_monte_vegas_state * s, double * result, double * sigma)
void gsl_monte_vegas_params_get (const gsl_monte_vegas_state * s, gsl_monte_vegas_params * params)
void gsl_monte_vegas_params_set (gsl_monte_vegas_state * s, const gsl_monte_vegas_params * params)

# SECTION{"Ordinary Differential Equations"}
# PACKAGE{"github.com/dtromb/gogsl/ode", ["gsl/gsl_odeiv2.h"],["gsl_odeiv2"]}
// XXX , TODO - These types very likely hold references to each other.  We need to track these
// internal references to keep the C structure peers from being deallocated when the Go 
// wrapper structs are deallocated, but a computation is still active!
# TYPEMAP{"gsl_odeiv2_system*","*GslOdeiv2System","*C.gsl_odeiv2_system","CPTR"}
# GSL_REFTYPE{"gsl_odeiv2_step",[]}
# GSL_REFTYPE{"gsl_odeiv2_step_type",[]}
# GSL_REFTYPE{"gsl_odeiv2_driver",[]}
# GSL_REFTYPE{"gsl_odeiv2_control",[]}
# GSL_REFTYPE{"gsl_odeiv2_control_type",[]}
# GSL_REFTYPE{"gsl_odeiv2_evolve",[]}
gsl_odeiv2_step * gsl_odeiv2_step_alloc (const gsl_odeiv2_step_type * T, size_t dim)
int gsl_odeiv2_step_reset (gsl_odeiv2_step * s)
void gsl_odeiv2_step_free (gsl_odeiv2_step * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_odeiv2_step_name (const gsl_odeiv2_step * s)
unsigned int gsl_odeiv2_step_order (const gsl_odeiv2_step * s)
int gsl_odeiv2_step_set_driver (gsl_odeiv2_step * s, const gsl_odeiv2_driver * d)
int gsl_odeiv2_step_apply (gsl_odeiv2_step * s, double t, double h, double y[], double yerr[], const double dydt_in[], double dydt_out[], const gsl_odeiv2_system * sys)
gsl_odeiv2_control * gsl_odeiv2_control_standard_new (double eps_abs, double eps_rel, double a_y, double a_dydt)
gsl_odeiv2_control * gsl_odeiv2_control_y_new (double eps_abs, double eps_rel)
gsl_odeiv2_control * gsl_odeiv2_control_yp_new (double eps_abs, double eps_rel)
gsl_odeiv2_control * gsl_odeiv2_control_scaled_new (double eps_abs, double eps_rel, double a_y, double a_dydt, const double scale_abs[], size_t dim)
gsl_odeiv2_control * gsl_odeiv2_control_alloc (const gsl_odeiv2_control_type * T)
int gsl_odeiv2_control_init (gsl_odeiv2_control * c, double eps_abs, double eps_rel, double a_y, double a_dydt)
void gsl_odeiv2_control_free (gsl_odeiv2_control * c)
# NEXTMAP{"6","SLICEPTR"}
int gsl_odeiv2_control_hadjust (gsl_odeiv2_control * c, gsl_odeiv2_step * s, const double y[], const double yerr[], const double dydt[], double * h)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_odeiv2_control_name (const gsl_odeiv2_control * c)
# NEXTMAP{"6","SLICEPTR"}
int gsl_odeiv2_control_errlevel (gsl_odeiv2_control * c, const double y, const double dydt, const double h, const size_t ind, double * errlev)
int gsl_odeiv2_control_set_driver (gsl_odeiv2_control * c, const gsl_odeiv2_driver * d)
gsl_odeiv2_evolve * gsl_odeiv2_evolve_alloc (size_t dim)
# NEXTMAP{"5","OUTPTR"}
# NEXTMAP{"7","OUTPTR"}
int gsl_odeiv2_evolve_apply (gsl_odeiv2_evolve * e, gsl_odeiv2_control * con, gsl_odeiv2_step * step, const gsl_odeiv2_system * sys, double * t, double t1, double * h, double y[])
# NEXTMAP{"5","OUTPTR"}
int gsl_odeiv2_evolve_apply_fixed_step (gsl_odeiv2_evolve * e, gsl_odeiv2_control * con, gsl_odeiv2_step * step, const gsl_odeiv2_system * sys, double * t, const double h, double y[])
int gsl_odeiv2_evolve_reset (gsl_odeiv2_evolve * e)
void gsl_odeiv2_evolve_free (gsl_odeiv2_evolve * e)
int gsl_odeiv2_evolve_set_driver (gsl_odeiv2_evolve * e, const gsl_odeiv2_driver * d)
gsl_odeiv2_driver * gsl_odeiv2_driver_alloc_y_new (const gsl_odeiv2_system * sys, const gsl_odeiv2_step_type * T, const double hstart, const double epsabs, const double epsrel)
gsl_odeiv2_driver * gsl_odeiv2_driver_alloc_yp_new (const gsl_odeiv2_system * sys, const gsl_odeiv2_step_type * T, const double hstart, const double epsabs, const double epsrel)
gsl_odeiv2_driver * gsl_odeiv2_driver_alloc_standard_new (const gsl_odeiv2_system * sys, const gsl_odeiv2_step_type * T, const double hstart, const double epsabs, const double epsrel, const double a_y, const double a_dydt)
gsl_odeiv2_driver * gsl_odeiv2_driver_alloc_scaled_new (const gsl_odeiv2_system * sys, const gsl_odeiv2_step_type * T, const double hstart, const double epsabs, const double epsrel, const double a_y, const double a_dydt, const double scale_abs[])
int gsl_odeiv2_driver_set_hmin (gsl_odeiv2_driver* d, const double hmin)
int gsl_odeiv2_driver_set_hmax (gsl_odeiv2_driver* d, const double hmax)
int gsl_odeiv2_driver_set_nmax (gsl_odeiv2_driver* d, const unsigned long nmax)
# NEXTMAP{"2","OUTPTR"}
int gsl_odeiv2_driver_apply (gsl_odeiv2_driver* d, double * t, const double t1, double y[])
# NEXTMAP{"2","OUTPTR"}
int gsl_odeiv2_driver_apply_fixed_step (gsl_odeiv2_driver* d, double * t, const double h, const unsigned long n, double y[])
int gsl_odeiv2_driver_reset (gsl_odeiv2_driver* d)
int gsl_odeiv2_driver_reset_hstart (gsl_odeiv2_driver* d, const double hstart)
void gsl_odeiv2_driver_free (gsl_odeiv2_driver* d)


# SECTION{"Interpolation"}
# PACKAGE{"github.com/dtromb/gogsl/interp", ["gsl/gsl_interp.h","gsl/gsl_spline.h"],["gsl_interp","gsl"]}
# GSL_REFTYPE{"gsl_interp",[]}
# GSL_REFTYPE{"gsl_interp_type",[]}
# GSL_REFTYPE{"gsl_interp_accel",[]}
# GSL_REFTYPE{"gsl_spline",[]}
gsl_interp * gsl_interp_alloc (const gsl_interp_type * T, size_t size)
int gsl_interp_init (gsl_interp * interp, const double xa[], const double ya[], size_t size)
void gsl_interp_free (gsl_interp * interp)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_interp_name (const gsl_interp * interp)
unsigned int gsl_interp_min_size (const gsl_interp * interp)
unsigned int gsl_interp_type_min_size (const gsl_interp_type * T)
size_t gsl_interp_bsearch (const double x_array[], double x, size_t index_lo, size_t index_hi)
gsl_interp_accel * gsl_interp_accel_alloc ()
size_t gsl_interp_accel_find (gsl_interp_accel * a, const double x_array[], size_t size, double x)
int gsl_interp_accel_reset (gsl_interp_accel * acc);
void gsl_interp_accel_free (gsl_interp_accel* acc)
double gsl_interp_eval (const gsl_interp * interp, const double xa[], const double ya[], double x, gsl_interp_accel * acc)
# NEXTMAP{"6","OUTPTR"}
int gsl_interp_eval_e (const gsl_interp * interp, const double xa[], const double ya[], double x, gsl_interp_accel * acc, double * y)
double gsl_interp_eval_deriv (const gsl_interp * interp, const double xa[], const double ya[], double x, gsl_interp_accel * acc)
# NEXTMAP{"6","OUTPTR"}
int gsl_interp_eval_deriv_e (const gsl_interp * interp, const double xa[], const double ya[], double x, gsl_interp_accel * acc, double * d)
double gsl_interp_eval_deriv2 (const gsl_interp * interp, const double xa[], const double ya[], double x, gsl_interp_accel * acc)
# NEXTMAP{"6","OUTPTR"}
int gsl_interp_eval_deriv2_e (const gsl_interp * interp, const double xa[], const double ya[], double x, gsl_interp_accel * acc, double * d2)
double gsl_interp_eval_integ (const gsl_interp * interp, const double xa[], const double ya[], double a, double b, gsl_interp_accel * acc)
# NEXTMAP{"7","OUTPTR"}
int gsl_interp_eval_integ_e (const gsl_interp * interp, const double xa[], const double ya[], double a, double b, gsl_interp_accel * acc, double * result)
gsl_spline * gsl_spline_alloc (const gsl_interp_type * T, size_t size)
int gsl_spline_init (gsl_spline * spline, const double xa[], const double ya[], size_t size)
void gsl_spline_free (gsl_spline * spline)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_spline_name (const gsl_spline * spline)
unsigned int gsl_spline_min_size (const gsl_spline * spline)
double gsl_spline_eval (const gsl_spline * spline, double x, gsl_interp_accel * acc)
# NEXTMAP{"4","OUTPTR"}
int gsl_spline_eval_e (const gsl_spline * spline, double x, gsl_interp_accel * acc, double * y)
double gsl_spline_eval_deriv (const gsl_spline * spline, double x, gsl_interp_accel * acc)
# NEXTMAP{"4","OUTPTR"}
int gsl_spline_eval_deriv_e (const gsl_spline * spline, double x, gsl_interp_accel * acc, double * d)
double gsl_spline_eval_deriv2 (const gsl_spline * spline, double x, gsl_interp_accel * acc)
# NEXTMAP{"4","OUTPTR"}
int gsl_spline_eval_deriv2_e (const gsl_spline * spline, double x, gsl_interp_accel * acc, double * d2)
double gsl_spline_eval_integ (const gsl_spline * spline, double a, double b, gsl_interp_accel * acc)
# NEXTMAP{"5","OUTPTR"}
int gsl_spline_eval_integ_e (const gsl_spline * spline, double a, double b, gsl_interp_accel * acc, double * res)


# SECTION{"Numerical Differentiation"}
# PACKAGE{"github.com/dtromb/gogsl/deriv", ["gsl/gsl_deriv.h"],["gsl_deriv"]}
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_deriv_central (const gsl_function * f, double x, double h, double * result, double * abserr)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_deriv_forward (const gsl_function * f, double x, double h, double * result, double * abserr)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_deriv_backward (const gsl_function * f, double x, double h, double * result, double * abserr)

# SECTION{"Chebyshev Approximations"}
# PACKAGE{"github.com/dtromb/gogsl/chebyshev", ["stdlib.h","gsl/gsl_chebyshev.h"],["gsl_cheb"]}
# GSL_REFTYPE{"gsl_cheb_series",[]}
gsl_cheb_series * gsl_cheb_alloc (const size_t n)
void gsl_cheb_free (gsl_cheb_series * cs)
int gsl_cheb_init (gsl_cheb_series * cs, const gsl_function * f, const double a, const double b)
size_t gsl_cheb_order (const gsl_cheb_series * cs)
size_t gsl_cheb_size (const gsl_cheb_series * cs)
double gsl_cheb_eval (const gsl_cheb_series * cs, double x)
# NEXTMAP{"3","OUTPTR"}
# NEXTMAP{"4","OUTPTR"}
int gsl_cheb_eval_err (const gsl_cheb_series * cs, const double x, double * result, double * abserr)
double gsl_cheb_eval_n (const gsl_cheb_series * cs, size_t order, double x)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_cheb_eval_n_err (const gsl_cheb_series * cs, const size_t order, const double x, double * result, double * abserr)
int gsl_cheb_calc_deriv (gsl_cheb_series * deriv, const gsl_cheb_series * cs)
int gsl_cheb_calc_integ (gsl_cheb_series * integ, const gsl_cheb_series * cs)


# SECTION{"Series Acceleration"}
# PACKAGE{"github.com/dtromb/gogsl/sum", ["gsl/gsl_sum.h"],["gsl_sum"]}
# GSL_REFTYPE{"gsl_sum_levin_u_workspace",[]}
# GSL_REFTYPE{"gsl_sum_levin_utrunc_workspace",[]}
gsl_sum_levin_u_workspace * gsl_sum_levin_u_alloc (size_t n)
void gsl_sum_levin_u_free (gsl_sum_levin_u_workspace * w)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_sum_levin_u_accel (const double * array, size_t array_size, gsl_sum_levin_u_workspace * w, double * sum_accel, double * abserr)
gsl_sum_levin_utrunc_workspace * gsl_sum_levin_utrunc_alloc (size_t n)
void gsl_sum_levin_utrunc_free (gsl_sum_levin_utrunc_workspace * w)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_sum_levin_utrunc_accel (const double * array, size_t array_size, gsl_sum_levin_utrunc_workspace * w, double * sum_accel, double * abserr_trunc)

# SECTION{"Wavelet Transforms"}
# PACKAGE{"github.com/dtromb/gogsl/wavelet", ["gsl/gsl_wavelet.h","gsl/gsl_wavelet2d.h"],["gsl"]}
# TYPEMAP{"gsl_wavelet_direction","GslWaveletDirection","C.gsl_wavelet_direction"}
# GSL_REFTYPE{"gsl_wavelet",[]}
# GSL_REFTYPE{"gsl_wavelet_type",[]}
# GSL_REFTYPE{"gsl_wavelet_workspace",[]}
gsl_wavelet * gsl_wavelet_alloc (const gsl_wavelet_type * T, size_t k)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_wavelet_name (const gsl_wavelet * w)
void gsl_wavelet_free (gsl_wavelet * w)
gsl_wavelet_workspace * gsl_wavelet_workspace_alloc (size_t n)
void gsl_wavelet_workspace_free (gsl_wavelet_workspace * work)
# NEXTMAP{"2","SLICEPTR"}
int gsl_wavelet_transform (const gsl_wavelet * w, double * data, size_t stride, size_t n, gsl_wavelet_direction dir, gsl_wavelet_workspace * work)
# NEXTMAP{"2","SLICEPTR"}
int gsl_wavelet_transform_forward (const gsl_wavelet * w, double * data, size_t stride, size_t n, gsl_wavelet_workspace * work)
# NEXTMAP{"2","SLICEPTR"}
int gsl_wavelet_transform_inverse (const gsl_wavelet * w, double * data, size_t stride, size_t n, gsl_wavelet_workspace * work)
# NEXTMAP{"2","SLICEPTR"}
int gsl_wavelet2d_transform (const gsl_wavelet * w, double * data, size_t tda, size_t size1, size_t size2, gsl_wavelet_direction dir, gsl_wavelet_workspace * work)
# NEXTMAP{"2","SLICEPTR"}
int gsl_wavelet2d_transform_forward (const gsl_wavelet * w, double * data, size_t tda, size_t size1, size_t size2, gsl_wavelet_workspace * work)
# NEXTMAP{"2","SLICEPTR"}
int gsl_wavelet2d_transform_inverse (const gsl_wavelet * w, double * data, size_t tda, size_t size1, size_t size2, gsl_wavelet_workspace * work)
int gsl_wavelet2d_transform_matrix (const gsl_wavelet * w, gsl_matrix * m, gsl_wavelet_direction dir, gsl_wavelet_workspace * work)
int gsl_wavelet2d_transform_matrix_forward (const gsl_wavelet * w, gsl_matrix * m, gsl_wavelet_workspace * work)
int gsl_wavelet2d_transform_matrix_inverse (const gsl_wavelet * w, gsl_matrix * m, gsl_wavelet_workspace * work)
# NEXTMAP{"2","SLICEPTR"}
int gsl_wavelet2d_nstransform (const gsl_wavelet * w, double * data, size_t tda, size_t size1, size_t size2, gsl_wavelet_direction dir, gsl_wavelet_workspace * work)
# NEXTMAP{"2","SLICEPTR"}
int gsl_wavelet2d_nstransform_forward (const gsl_wavelet * w, double * data, size_t tda, size_t size1, size_t size2, gsl_wavelet_workspace * work)
# NEXTMAP{"2","SLICEPTR"}
int gsl_wavelet2d_nstransform_inverse (const gsl_wavelet * w, double * data, size_t tda, size_t size1, size_t size2, gsl_wavelet_workspace * work)
int gsl_wavelet2d_nstransform_matrix (const gsl_wavelet * w, gsl_matrix * m, gsl_wavelet_direction dir, gsl_wavelet_workspace * work)
int gsl_wavelet2d_nstransform_matrix_forward (const gsl_wavelet * w, gsl_matrix * m, gsl_wavelet_workspace * work)
int gsl_wavelet2d_nstransform_matrix_inverse (const gsl_wavelet * w, gsl_matrix * m, gsl_wavelet_workspace * work)


# SECTION{"Discrete Hankel Transforms"}
# PACKAGE{"github.com/dtromb/gogsl/dht", ["gsl/gsl_dht.h"],["gsl_dht"]}
# GSL_REFTYPE{"gsl_dht",[]}
gsl_dht * gsl_dht_alloc (size_t size)
int gsl_dht_init (gsl_dht * t, double nu, double xmax)
gsl_dht * gsl_dht_new (size_t size, double nu, double xmax)
void gsl_dht_free (gsl_dht * t)
# NEXTMAP{"2","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
int gsl_dht_apply (const gsl_dht * t, double * f_in, double * f_out)
double gsl_dht_x_sample (const gsl_dht * t, int n)
double gsl_dht_k_sample (const gsl_dht * t, int n)

# SECTION{"One-dimensional Root Finding"}
# PACKAGE{"github.com/dtromb/gogsl/root", ["gsl/gsl_roots.h"],["gsl_root"]}
# GSL_REFTYPE{"gsl_root_fsolver",[]}
# GSL_REFTYPE{"gsl_root_fsolver_type",[]}
# GSL_REFTYPE{"gsl_root_fdfsolver",[]}
# GSL_REFTYPE{"gsl_root_fdfsolver_type",[]}
gsl_root_fsolver * gsl_root_fsolver_alloc (const gsl_root_fsolver_type * T)
gsl_root_fdfsolver * gsl_root_fdfsolver_alloc (const gsl_root_fdfsolver_type * T)
int gsl_root_fsolver_set (gsl_root_fsolver * s, gsl_function * f, double x_lower, double x_upper)
int gsl_root_fdfsolver_set (gsl_root_fdfsolver * s, gsl_function_fdf * fdf, double root)
void gsl_root_fsolver_free (gsl_root_fsolver * s)
void gsl_root_fdfsolver_free (gsl_root_fdfsolver * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_root_fsolver_name (const gsl_root_fsolver * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_root_fdfsolver_name (const gsl_root_fdfsolver * s)
int gsl_root_fsolver_iterate (gsl_root_fsolver * s)
int gsl_root_fdfsolver_iterate (gsl_root_fdfsolver * s)
double gsl_root_fsolver_root (const gsl_root_fsolver * s)
double gsl_root_fdfsolver_root (const gsl_root_fdfsolver * s)
double gsl_root_fsolver_x_lower (const gsl_root_fsolver * s)
double gsl_root_fsolver_x_upper (const gsl_root_fsolver * s)
int gsl_root_test_interval (double x_lower, double x_upper, double epsabs, double epsrel)
int gsl_root_test_delta (double x1, double x0, double epsabs, double epsrel)
int gsl_root_test_residual (double f, double epsabs)

# SECTION{"One-dimensional Minimization"}
# PACKAGE{"github.com/dtromb/gogsl/min", ["gsl/gsl_min.h"],["gsl_min"]}
# GSL_REFTYPE{"gsl_min_fminimizer",[]}
# GSL_REFTYPE{"gsl_min_fminimizer_type",[]}
gsl_min_fminimizer * gsl_min_fminimizer_alloc (const gsl_min_fminimizer_type * T)
int gsl_min_fminimizer_set (gsl_min_fminimizer * s, gsl_function * f, double x_minimum, double x_lower, double x_upper)
int gsl_min_fminimizer_set_with_values (gsl_min_fminimizer * s, gsl_function * f, double x_minimum, double f_minimum, double x_lower, double f_lower, double x_upper, double f_upper)
void gsl_min_fminimizer_free (gsl_min_fminimizer * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_min_fminimizer_name (const gsl_min_fminimizer * s)
int gsl_min_fminimizer_iterate (gsl_min_fminimizer * s)
double gsl_min_fminimizer_x_minimum (const gsl_min_fminimizer * s)
double gsl_min_fminimizer_x_upper (const gsl_min_fminimizer * s)
double gsl_min_fminimizer_x_lower (const gsl_min_fminimizer * s)
double gsl_min_fminimizer_f_minimum (const gsl_min_fminimizer * s)
double gsl_min_fminimizer_f_upper (const gsl_min_fminimizer * s)
double gsl_min_fminimizer_f_lower (const gsl_min_fminimizer * s)
int gsl_min_test_interval (double x_lower, double x_upper, double epsabs, double epsrel)

# SECTION{"Multi-dimensional Root Finding"}
# PACKAGE{"github.com/dtromb/gogsl/multiroot", ["gsl/gsl_multiroots.h","gsl/gsl_vector.h","gsl/gsl_matrix.h"],["gsl_multiroot"]}
# TYPEMAP{"gsl_multiroot_function*","*GslMultirootFunction","*C.gsl_multiroot_function","CPTR"}
# TYPEMAP{"gsl_multiroot_function_fdf*","*GslMultirootFunctionFdf","*C.gsl_multiroot_function_fdf","CPTR"}
# GSL_REFTYPE{"gsl_multiroot_fsolver",[]}
# GSL_REFTYPE{"gsl_multiroot_fsolver_type",[]}
# GSL_REFTYPE{"gsl_multiroot_fdfsolver",[]}
# GSL_REFTYPE{"gsl_multiroot_fdfsolver_type",[]}
gsl_multiroot_fsolver * gsl_multiroot_fsolver_alloc (const gsl_multiroot_fsolver_type * T, size_t n)
gsl_multiroot_fdfsolver * gsl_multiroot_fdfsolver_alloc (const gsl_multiroot_fdfsolver_type * T, size_t n)
int gsl_multiroot_fsolver_set (gsl_multiroot_fsolver * s, gsl_multiroot_function * f, const gsl_vector * x)
int gsl_multiroot_fdfsolver_set (gsl_multiroot_fdfsolver * s, gsl_multiroot_function_fdf * fdf, const gsl_vector * x)
void gsl_multiroot_fsolver_free (gsl_multiroot_fsolver * s)
void gsl_multiroot_fdfsolver_free (gsl_multiroot_fdfsolver * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_multiroot_fsolver_name (const gsl_multiroot_fsolver * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_multiroot_fdfsolver_name (const gsl_multiroot_fdfsolver * s)
int gsl_multiroot_fsolver_iterate (gsl_multiroot_fsolver * s)
int gsl_multiroot_fdfsolver_iterate (gsl_multiroot_fdfsolver * s)
gsl_vector * gsl_multiroot_fsolver_root (const gsl_multiroot_fsolver * s)
gsl_vector * gsl_multiroot_fdfsolver_root (const gsl_multiroot_fdfsolver * s)
gsl_vector * gsl_multiroot_fsolver_f (const gsl_multiroot_fsolver * s)
gsl_vector * gsl_multiroot_fdfsolver_f (const gsl_multiroot_fdfsolver * s)
gsl_vector * gsl_multiroot_fsolver_dx (const gsl_multiroot_fsolver * s)
gsl_vector * gsl_multiroot_fdfsolver_dx (const gsl_multiroot_fdfsolver * s)
int gsl_multiroot_test_delta (const gsl_vector * dx, const gsl_vector * x, double epsabs, double epsrel)
int gsl_multiroot_test_residual (const gsl_vector * f, double epsabs)

# SECTION{"Multi-dimensional Minimization"}
# PACKAGE{"github.com/dtromb/gogsl/multimin", ["gsl/gsl_multimin.h"],["gsl_multimin"]}
# TYPEMAP{"gsl_multimin_function*","*GslMultiminFunction","*C.gsl_multimin_function","CPTR"}
# TYPEMAP{"gsl_multimin_function_fdf*","*GslMultiminFunctionFdf","*C.gsl_multimin_function_fdf","CPTR"}
# GSL_REFTYPE{"gsl_multimin_fminimizer",[]}
# GSL_REFTYPE{"gsl_multimin_fminimizer_type",[]}
# GSL_REFTYPE{"gsl_multimin_fdfminimizer",[]}
# GSL_REFTYPE{"gsl_multimin_fdfminimizer_type",[]}
gsl_multimin_fdfminimizer * gsl_multimin_fdfminimizer_alloc (const gsl_multimin_fdfminimizer_type * T, size_t n)
gsl_multimin_fminimizer * gsl_multimin_fminimizer_alloc (const gsl_multimin_fminimizer_type * T, size_t n)
int gsl_multimin_fdfminimizer_set (gsl_multimin_fdfminimizer * s, gsl_multimin_function_fdf * fdf, const gsl_vector * x, double step_size, double tol)
int gsl_multimin_fminimizer_set (gsl_multimin_fminimizer * s, gsl_multimin_function * f, const gsl_vector * x, const gsl_vector * step_size)
void gsl_multimin_fdfminimizer_free (gsl_multimin_fdfminimizer * s)
void gsl_multimin_fminimizer_free (gsl_multimin_fminimizer * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_multimin_fdfminimizer_name (const gsl_multimin_fdfminimizer * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_multimin_fminimizer_name (const gsl_multimin_fminimizer * s)
int gsl_multimin_fdfminimizer_iterate (gsl_multimin_fdfminimizer * s)
int gsl_multimin_fminimizer_iterate (gsl_multimin_fminimizer * s)
gsl_vector * gsl_multimin_fdfminimizer_x (const gsl_multimin_fdfminimizer * s)
gsl_vector * gsl_multimin_fminimizer_x (const gsl_multimin_fminimizer * s)
double gsl_multimin_fdfminimizer_minimum (const gsl_multimin_fdfminimizer * s)
double gsl_multimin_fminimizer_minimum (const gsl_multimin_fminimizer * s)
gsl_vector * gsl_multimin_fdfminimizer_gradient (const gsl_multimin_fdfminimizer * s)
double gsl_multimin_fminimizer_size (const gsl_multimin_fminimizer * s)
int gsl_multimin_fdfminimizer_restart (gsl_multimin_fdfminimizer * s)
int gsl_multimin_test_gradient (const gsl_vector * g, double epsabs)
int gsl_multimin_test_size (const double size, double epsabs)

# SECTION{"Least-squares Fitting"}
# PACKAGE{"github.com/dtromb/gogsl/fit", ["gsl/gsl_fit.h","gsl/gsl_multifit.h","gsl/gsl_vector.h","gsl/gsl_matrix.h"],["gsl_fit"]}
# GSL_REFTYPE{"gsl_multifit_linear_workspace",[]}
# GSL_REFTYPE{"gsl_multifit_robust_workspace",[]}
# GSL_REFTYPE{"gsl_multifit_robust_type",[]}
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
# NEXTMAP{"6","OUTPTR"}
# NEXTMAP{"7","OUTPTR"}
# NEXTMAP{"8","OUTPTR"}
# NEXTMAP{"9","OUTPTR"}
# NEXTMAP{"10","OUTPTR"}
# NEXTMAP{"11","OUTPTR"}
int gsl_fit_linear (const double * x, const size_t xstride, const double * y, const size_t ystride, size_t n, double * c0, double * c1, double * cov00, double * cov01, double * cov11, double * sumsq)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
# NEXTMAP{"5","SLICEPTR"}
# NEXTMAP{"8","OUTPTR"}
# NEXTMAP{"9","OUTPTR"}
# NEXTMAP{"10","OUTPTR"}
# NEXTMAP{"11","OUTPTR"}
# NEXTMAP{"12","OUTPTR"}
# NEXTMAP{"13","OUTPTR"}
int gsl_fit_wlinear (const double * x, const size_t xstride, const double * w, const size_t wstride, const double * y, const size_t ystride, size_t n, double * c0, double * c1, double * cov00, double * cov01, double * cov11, double * chisq)
# NEXTMAP{"7","OUTPTR"}
# NEXTMAP{"8","OUTPTR"}
int gsl_fit_linear_est (double x, double c0, double c1, double cov00, double cov01, double cov11, double * y, double * y_err)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
# NEXTMAP{"6","OUTPTR"}
# NEXTMAP{"7","OUTPTR"}
# NEXTMAP{"8","OUTPTR"}
int gsl_fit_mul (const double * x, const size_t xstride, const double * y, const size_t ystride, size_t n, double * c1, double * cov11, double * sumsq)
# NEXTMAP{"1","SLICEPTR"}
# NEXTMAP{"3","SLICEPTR"}
# NEXTMAP{"5","SLICEPTR"}
# NEXTMAP{"8","OUTPTR"}
# NEXTMAP{"9","OUTPTR"}
# NEXTMAP{"10","OUTPTR"}
int gsl_fit_wmul (const double * x, const size_t xstride, const double * w, const size_t wstride, const double * y, const size_t ystride, size_t n, double * c1, double * cov11, double * sumsq)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_fit_mul_est (double x, double c1, double cov11, double * y, double * y_err)
gsl_multifit_linear_workspace * gsl_multifit_linear_alloc (size_t n, size_t p)
void gsl_multifit_linear_free (gsl_multifit_linear_workspace * work)
# NEXTMAP{"5","OUTPTR"}
int gsl_multifit_linear (const gsl_matrix * X, const gsl_vector * y, gsl_vector * c, gsl_matrix * cov, double * chisq, gsl_multifit_linear_workspace * work)
# NEXTMAP{"6","OUTPTR"}
int gsl_multifit_wlinear (const gsl_matrix * X, const gsl_vector * w, const gsl_vector * y, gsl_vector * c, gsl_matrix * cov, double * chisq, gsl_multifit_linear_workspace * work)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"7","OUTPTR"}
int gsl_multifit_linear_svd (const gsl_matrix * X, const gsl_vector * y, double tol, size_t * rank, gsl_vector * c, gsl_matrix * cov, double * chisq, gsl_multifit_linear_workspace * work)
# NEXTMAP{"5","OUTPTR"}
# NEXTMAP{"8","OUTPTR"}
int gsl_multifit_wlinear_svd (const gsl_matrix * X, const gsl_vector * w, const gsl_vector * y, double tol, size_t * rank, gsl_vector * c, gsl_matrix * cov, double * chisq, gsl_multifit_linear_workspace * work)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"7","OUTPTR"}
int gsl_multifit_linear_usvd (const gsl_matrix * X, const gsl_vector * y, double tol, size_t * rank, gsl_vector * c, gsl_matrix * cov, double * chisq, gsl_multifit_linear_workspace * work)
# NEXTMAP{"5","OUTPTR"}
# NEXTMAP{"8","OUTPTR"}
int gsl_multifit_wlinear_usvd (const gsl_matrix * X, const gsl_vector * w, const gsl_vector * y, double tol, size_t * rank, gsl_vector * c, gsl_matrix * cov, double * chisq, gsl_multifit_linear_workspace * work)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_multifit_linear_est (const gsl_vector * x, const gsl_vector * c, const gsl_matrix * cov, double * y, double * y_err)
int gsl_multifit_linear_residuals (const gsl_matrix * X, const gsl_vector * y, const gsl_vector * c, gsl_vector * r)
gsl_multifit_robust_workspace * gsl_multifit_robust_alloc (const gsl_multifit_robust_type * T, const size_t n, const size_t p)
void gsl_multifit_robust_free (gsl_multifit_robust_workspace * w)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_multifit_robust_name (const gsl_multifit_robust_workspace * w)
int gsl_multifit_robust_tune (const double tune, gsl_multifit_robust_workspace * w)
int gsl_multifit_robust (const gsl_matrix * X, const gsl_vector * y, gsl_vector * c, gsl_matrix * cov, gsl_multifit_robust_workspace * w)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_multifit_robust_est (const gsl_vector * x, const gsl_vector * c, const gsl_matrix * cov, double * y, double * y_err)

# SECTION{"Nonlinear Least-squares Fitting"}
# PACKAGE{"github.com/dtromb/gogsl/multifit", ["gsl/gsl_multifit.h","gsl/gsl_multifit_nlin.h"],["gsl_multifit"]}
# TYPEMAP{"gsl_multifit_function*","*GslMultifitFunction","*C.gsl_multifit_function","CPTR"}
# TYPEMAP{"gsl_multifit_function_fdf*","*GslMultifitFunctionFdf","*C.gsl_multifit_function_fdf","CPTR"}
# GSL_REFTYPE{"gsl_multifit_fsolver",[]}
# GSL_REFTYPE{"gsl_multifit_fsolver_type",[]}
# GSL_REFTYPE{"gsl_multifit_fdfsolver",[]}
# GSL_REFTYPE{"gsl_multifit_fdfsolver_type",[]}
gsl_multifit_fsolver * gsl_multifit_fsolver_alloc (const gsl_multifit_fsolver_type * T, size_t n, size_t p)
gsl_multifit_fdfsolver * gsl_multifit_fdfsolver_alloc (const gsl_multifit_fdfsolver_type * T, size_t n, size_t p)
int gsl_multifit_fsolver_set (gsl_multifit_fsolver * s, gsl_multifit_function * f, const gsl_vector * x)
int gsl_multifit_fdfsolver_set (gsl_multifit_fdfsolver * s, gsl_multifit_function_fdf * fdf, const gsl_vector * x)
void gsl_multifit_fsolver_free (gsl_multifit_fsolver * s)
void gsl_multifit_fdfsolver_free (gsl_multifit_fdfsolver * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_multifit_fsolver_name (const gsl_multifit_fsolver * s)
# NEXTMAP{"0","STRING"}
# NEXTTYPE{"0","string"}
const char * gsl_multifit_fdfsolver_name (const gsl_multifit_fdfsolver * s)
int gsl_multifit_fdfsolver_dif_df (const gsl_vector * x, gsl_multifit_function_fdf * fdf, const gsl_vector * f, gsl_matrix * J)
int gsl_multifit_fdfsolver_dif_fdf (const gsl_vector * x, gsl_multifit_function_fdf * fdf, gsl_vector * f, gsl_matrix * J)
int gsl_multifit_fsolver_iterate (gsl_multifit_fsolver * s)
int gsl_multifit_fdfsolver_iterate (gsl_multifit_fdfsolver * s)
gsl_vector * gsl_multifit_fsolver_position (const gsl_multifit_fsolver * s)
gsl_vector * gsl_multifit_fdfsolver_position (const gsl_multifit_fdfsolver * s)
int gsl_multifit_test_delta (const gsl_vector * dx, const gsl_vector * x, double epsabs, double epsrel)
int gsl_multifit_test_gradient (const gsl_vector * g, double epsabs)
int gsl_multifit_gradient (const gsl_matrix * J, const gsl_vector * f, gsl_vector * g)
int gsl_multifit_fsolver_driver (gsl_multifit_fsolver * s, const size_t maxiter, const double epsabs, const double epsrel)
int gsl_multifit_fdfsolver_driver (gsl_multifit_fdfsolver * s, const size_t maxiter, const double epsabs, const double epsrel)
int gsl_multifit_covar (const gsl_matrix * J, double epsrel, gsl_matrix * covar)

# SECTION{"Basis Splines"}
# PACKAGE{"github.com/dtromb/gogsl/bspline", ["gsl/gsl_bspline.h"],["gsl_bspline"]}
# GSL_REFTYPE{"gsl_bspline_workspace",[]}
# GSL_REFTYPE{"gsl_bspline_deriv_workspace",[]}
gsl_bspline_workspace * gsl_bspline_alloc (const size_t k, const size_t nbreak)
void gsl_bspline_free (gsl_bspline_workspace * w)
gsl_bspline_deriv_workspace * gsl_bspline_deriv_alloc (const size_t k)
void gsl_bspline_deriv_free (gsl_bspline_deriv_workspace * w)
int gsl_bspline_knots (const gsl_vector * breakpts, gsl_bspline_workspace * w)
int gsl_bspline_knots_uniform (const double a, const double b, gsl_bspline_workspace * w)
int gsl_bspline_eval (const double x, gsl_vector * B, gsl_bspline_workspace * w)
# NEXTMAP{"3","OUTPTR"}
# NEXTMAP{"4","OUTPTR"}
int gsl_bspline_eval_nonzero (const double x, gsl_vector * Bk, size_t * istart, size_t * iend, gsl_bspline_workspace * w)
size_t gsl_bspline_ncoeffs (gsl_bspline_workspace * w)
int gsl_bspline_deriv_eval (const double x, const size_t nderiv, gsl_matrix * dB, gsl_bspline_workspace * w, gsl_bspline_deriv_workspace * dw)
# NEXTMAP{"4","OUTPTR"}
# NEXTMAP{"5","OUTPTR"}
int gsl_bspline_deriv_eval_nonzero (const double x, const size_t nderiv, gsl_matrix * dB, size_t * istart, size_t * iend, gsl_bspline_workspace * w, gsl_bspline_deriv_workspace * dw)
double gsl_bspline_greville_abscissa (size_t i, gsl_bspline_workspace *w);